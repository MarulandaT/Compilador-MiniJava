Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BIN
    COMILLADOBLE
    COMILLASIMPLE
    COMMENT
    NUMEROC

Grammar

Rule 0     S' -> program
Rule 1     program -> programprim
Rule 2     programprim -> classdecl programprim
Rule 3     programprim -> <empty>
Rule 4     classdecl -> CLASS ID A LLAVEIZQ B LLAVEDER
Rule 5     A -> EXTENDS ID
Rule 6     A -> <empty>
Rule 7     B -> fielddecl B
Rule 8     B -> methdecl B
Rule 9     B -> <empty>
Rule 10    fielddecl -> TYPE ID C FINALIZADOR
Rule 11    C -> COMA ID C
Rule 12    C -> <empty>
Rule 13    methdecl -> D ID PARENTIZQ E PARENTDER block
Rule 14    D -> TYPE
Rule 15    D -> VOID
Rule 16    E -> formals
Rule 17    E -> <empty>
Rule 18    formals -> TYPE ID F
Rule 19    F -> COMA TYPE ID F
Rule 20    F -> <empty>
Rule 21    TYPE -> G
Rule 22    G -> INT
Rule 23    G -> BOOLEAN
Rule 24    G -> STRING
Rule 25    G -> ID
Rule 26    G -> TYPE CORCHIZQ CORCHDER
Rule 27    block -> LLAVEIZQ H I LLAVEDER
Rule 28    H -> vardecl H
Rule 29    H -> <empty>
Rule 30    I -> stmt I
Rule 31    I -> <empty>
Rule 32    vardecl -> TYPE ID J L FINALIZADOR
Rule 33    J -> ASIGNAR expr
Rule 34    J -> <empty>
Rule 35    K -> COMA ID J
Rule 36    L -> K L
Rule 37    L -> <empty>
Rule 38    stmt -> M
Rule 39    M -> assign FINALIZADOR
Rule 40    M -> call FINALIZADOR
Rule 41    M -> RETURN N
Rule 42    M -> IF PARENTIZQ expr PARENTDER stmt O
Rule 43    M -> WHILE PARENTIZQ expr PARENTDER stmt
Rule 44    M -> BREAK FINALIZADOR
Rule 45    M -> CONTINUE FINALIZADOR
Rule 46    M -> block
Rule 47    N -> expr
Rule 48    N -> <empty>
Rule 49    O -> ELSE stmt
Rule 50    O -> <empty>
Rule 51    assign -> location ASIGNAR expr
Rule 52    location -> method
Rule 53    location -> Pprima
Rule 54    method -> P
Rule 55    P -> ID
Rule 56    P -> expr ACCESO ID
Rule 57    Pprima -> expr CORCHIZQ expr CORCHDER
Rule 58    call -> method PARENTIZQ Q PARENTDER
Rule 59    Q -> actuals
Rule 60    Q -> <empty>
Rule 61    actuals -> expr S
Rule 62    S -> expr S
Rule 63    S -> <empty>
Rule 64    expr -> T
Rule 65    T -> location
Rule 66    T -> call
Rule 67    T -> THIS
Rule 68    T -> NEW ID PARENTIZQ PARENTDER
Rule 69    T -> NEW TYPE CORCHIZQ expr CORCHDER
Rule 70    T -> expr ACCESO LENGTH
Rule 71    T -> expr binary expr
Rule 72    T -> unary expr
Rule 73    T -> literal
Rule 74    T -> PARENTIZQ expr PARENTDER
Rule 75    binary -> U
Rule 76    U -> MODULO
Rule 77    U -> YAND
Rule 78    U -> OOR
Rule 79    U -> MENORQUE
Rule 80    U -> MENORIGUAL
Rule 81    U -> MAYORQUE
Rule 82    U -> MAYORIGUAL
Rule 83    U -> COMPIGUAL
Rule 84    U -> COMPDIFERENTE
Rule 85    U -> PLUS
Rule 86    U -> MINUS
Rule 87    U -> POR
Rule 88    U -> DIVIDE
Rule 89    unary -> NEGLOGICA
Rule 90    literal -> V
Rule 91    V -> NUMERO
Rule 92    V -> CADENA
Rule 93    V -> TRUE
Rule 94    V -> FALSE
Rule 95    V -> NULL

Terminals, with rules where they appear

ACCESO               : 56 70
ASIGNAR              : 33 51
BIN                  : 
BOOLEAN              : 23
BREAK                : 44
CADENA               : 92
CLASS                : 4
COMA                 : 11 19 35
COMILLADOBLE         : 
COMILLASIMPLE        : 
COMMENT              : 
COMPDIFERENTE        : 84
COMPIGUAL            : 83
CONTINUE             : 45
CORCHDER             : 26 57 69
CORCHIZQ             : 26 57 69
DIVIDE               : 88
ELSE                 : 49
EXTENDS              : 5
FALSE                : 94
FINALIZADOR          : 10 32 39 40 44 45
ID                   : 4 5 10 11 13 18 19 25 32 35 55 56 68
IF                   : 42
INT                  : 22
LENGTH               : 70
LLAVEDER             : 4 27
LLAVEIZQ             : 4 27
MAYORIGUAL           : 82
MAYORQUE             : 81
MENORIGUAL           : 80
MENORQUE             : 79
MINUS                : 86
MODULO               : 76
NEGLOGICA            : 89
NEW                  : 68 69
NULL                 : 95
NUMERO               : 91
NUMEROC              : 
OOR                  : 78
PARENTDER            : 13 42 43 58 68 74
PARENTIZQ            : 13 42 43 58 68 74
PLUS                 : 85
POR                  : 87
RETURN               : 41
STRING               : 24
THIS                 : 67
TRUE                 : 93
VOID                 : 15
WHILE                : 43
YAND                 : 77
error                : 

Nonterminals, with rules where they appear

A                    : 4
B                    : 4 7 8
C                    : 10 11
D                    : 13
E                    : 13
F                    : 18 19
G                    : 21
H                    : 27 28
I                    : 27 30
J                    : 32 35
K                    : 36
L                    : 32 36
M                    : 38
N                    : 41
O                    : 42
P                    : 54
Pprima               : 53
Q                    : 58
S                    : 61 62
T                    : 64
TYPE                 : 10 14 18 19 26 32 69
U                    : 75
V                    : 90
actuals              : 59
assign               : 39
binary               : 71
block                : 13 46
call                 : 40 66
classdecl            : 2
expr                 : 33 42 43 47 51 56 57 57 61 62 69 70 71 71 72 74
fielddecl            : 7
formals              : 16
literal              : 73
location             : 51 65
methdecl             : 8
method               : 52 58
program              : 0
programprim          : 1 2
stmt                 : 30 42 43 49
unary                : 72
vardecl              : 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programprim
    (2) programprim -> . classdecl programprim
    (3) programprim -> .
    (4) classdecl -> . CLASS ID A LLAVEIZQ B LLAVEDER

    $end            reduce using rule 3 (programprim -> .)
    CLASS           shift and go to state 4

    program                        shift and go to state 1
    programprim                    shift and go to state 2
    classdecl                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> programprim .

    $end            reduce using rule 1 (program -> programprim .)


state 3

    (2) programprim -> classdecl . programprim
    (2) programprim -> . classdecl programprim
    (3) programprim -> .
    (4) classdecl -> . CLASS ID A LLAVEIZQ B LLAVEDER

    $end            reduce using rule 3 (programprim -> .)
    CLASS           shift and go to state 4

    classdecl                      shift and go to state 3
    programprim                    shift and go to state 5

state 4

    (4) classdecl -> CLASS . ID A LLAVEIZQ B LLAVEDER

    ID              shift and go to state 6


state 5

    (2) programprim -> classdecl programprim .

    $end            reduce using rule 2 (programprim -> classdecl programprim .)


state 6

    (4) classdecl -> CLASS ID . A LLAVEIZQ B LLAVEDER
    (5) A -> . EXTENDS ID
    (6) A -> .

    EXTENDS         shift and go to state 8
    LLAVEIZQ        reduce using rule 6 (A -> .)

    A                              shift and go to state 7

state 7

    (4) classdecl -> CLASS ID A . LLAVEIZQ B LLAVEDER

    LLAVEIZQ        shift and go to state 9


state 8

    (5) A -> EXTENDS . ID

    ID              shift and go to state 10


state 9

    (4) classdecl -> CLASS ID A LLAVEIZQ . B LLAVEDER
    (7) B -> . fielddecl B
    (8) B -> . methdecl B
    (9) B -> .
    (10) fielddecl -> . TYPE ID C FINALIZADOR
    (13) methdecl -> . D ID PARENTIZQ E PARENTDER block
    (21) TYPE -> . G
    (14) D -> . TYPE
    (15) D -> . VOID
    (22) G -> . INT
    (23) G -> . BOOLEAN
    (24) G -> . STRING
    (25) G -> . ID
    (26) G -> . TYPE CORCHIZQ CORCHDER

    LLAVEDER        reduce using rule 9 (B -> .)
    VOID            shift and go to state 18
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 11

    B                              shift and go to state 12
    fielddecl                      shift and go to state 13
    methdecl                       shift and go to state 14
    TYPE                           shift and go to state 15
    D                              shift and go to state 16
    G                              shift and go to state 17

state 10

    (5) A -> EXTENDS ID .

    LLAVEIZQ        reduce using rule 5 (A -> EXTENDS ID .)


state 11

    (25) G -> ID .

    ID              reduce using rule 25 (G -> ID .)
    CORCHIZQ        reduce using rule 25 (G -> ID .)


state 12

    (4) classdecl -> CLASS ID A LLAVEIZQ B . LLAVEDER

    LLAVEDER        shift and go to state 22


state 13

    (7) B -> fielddecl . B
    (7) B -> . fielddecl B
    (8) B -> . methdecl B
    (9) B -> .
    (10) fielddecl -> . TYPE ID C FINALIZADOR
    (13) methdecl -> . D ID PARENTIZQ E PARENTDER block
    (21) TYPE -> . G
    (14) D -> . TYPE
    (15) D -> . VOID
    (22) G -> . INT
    (23) G -> . BOOLEAN
    (24) G -> . STRING
    (25) G -> . ID
    (26) G -> . TYPE CORCHIZQ CORCHDER

    LLAVEDER        reduce using rule 9 (B -> .)
    VOID            shift and go to state 18
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 11

    fielddecl                      shift and go to state 13
    B                              shift and go to state 23
    methdecl                       shift and go to state 14
    TYPE                           shift and go to state 15
    D                              shift and go to state 16
    G                              shift and go to state 17

state 14

    (8) B -> methdecl . B
    (7) B -> . fielddecl B
    (8) B -> . methdecl B
    (9) B -> .
    (10) fielddecl -> . TYPE ID C FINALIZADOR
    (13) methdecl -> . D ID PARENTIZQ E PARENTDER block
    (21) TYPE -> . G
    (14) D -> . TYPE
    (15) D -> . VOID
    (22) G -> . INT
    (23) G -> . BOOLEAN
    (24) G -> . STRING
    (25) G -> . ID
    (26) G -> . TYPE CORCHIZQ CORCHDER

    LLAVEDER        reduce using rule 9 (B -> .)
    VOID            shift and go to state 18
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 11

    methdecl                       shift and go to state 14
    B                              shift and go to state 24
    fielddecl                      shift and go to state 13
    TYPE                           shift and go to state 15
    D                              shift and go to state 16
    G                              shift and go to state 17

state 15

    (10) fielddecl -> TYPE . ID C FINALIZADOR
    (14) D -> TYPE .
    (26) G -> TYPE . CORCHIZQ CORCHDER

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 25
    CORCHIZQ        shift and go to state 26

  ! ID              [ reduce using rule 14 (D -> TYPE .) ]


state 16

    (13) methdecl -> D . ID PARENTIZQ E PARENTDER block

    ID              shift and go to state 27


state 17

    (21) TYPE -> G .

    ID              reduce using rule 21 (TYPE -> G .)
    CORCHIZQ        reduce using rule 21 (TYPE -> G .)


state 18

    (15) D -> VOID .

    ID              reduce using rule 15 (D -> VOID .)


state 19

    (22) G -> INT .

    ID              reduce using rule 22 (G -> INT .)
    CORCHIZQ        reduce using rule 22 (G -> INT .)


state 20

    (23) G -> BOOLEAN .

    ID              reduce using rule 23 (G -> BOOLEAN .)
    CORCHIZQ        reduce using rule 23 (G -> BOOLEAN .)


state 21

    (24) G -> STRING .

    ID              reduce using rule 24 (G -> STRING .)
    CORCHIZQ        reduce using rule 24 (G -> STRING .)


state 22

    (4) classdecl -> CLASS ID A LLAVEIZQ B LLAVEDER .

    CLASS           reduce using rule 4 (classdecl -> CLASS ID A LLAVEIZQ B LLAVEDER .)
    $end            reduce using rule 4 (classdecl -> CLASS ID A LLAVEIZQ B LLAVEDER .)


state 23

    (7) B -> fielddecl B .

    LLAVEDER        reduce using rule 7 (B -> fielddecl B .)


state 24

    (8) B -> methdecl B .

    LLAVEDER        reduce using rule 8 (B -> methdecl B .)


state 25

    (10) fielddecl -> TYPE ID . C FINALIZADOR
    (11) C -> . COMA ID C
    (12) C -> .

    COMA            shift and go to state 29
    FINALIZADOR     reduce using rule 12 (C -> .)

    C                              shift and go to state 28

state 26

    (26) G -> TYPE CORCHIZQ . CORCHDER

    CORCHDER        shift and go to state 30


state 27

    (13) methdecl -> D ID . PARENTIZQ E PARENTDER block

    PARENTIZQ       shift and go to state 31


state 28

    (10) fielddecl -> TYPE ID C . FINALIZADOR

    FINALIZADOR     shift and go to state 32


state 29

    (11) C -> COMA . ID C

    ID              shift and go to state 33


state 30

    (26) G -> TYPE CORCHIZQ CORCHDER .

    ID              reduce using rule 26 (G -> TYPE CORCHIZQ CORCHDER .)
    CORCHIZQ        reduce using rule 26 (G -> TYPE CORCHIZQ CORCHDER .)


state 31

    (13) methdecl -> D ID PARENTIZQ . E PARENTDER block
    (16) E -> . formals
    (17) E -> .
    (18) formals -> . TYPE ID F
    (21) TYPE -> . G
    (22) G -> . INT
    (23) G -> . BOOLEAN
    (24) G -> . STRING
    (25) G -> . ID
    (26) G -> . TYPE CORCHIZQ CORCHDER

    PARENTDER       reduce using rule 17 (E -> .)
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 11

    E                              shift and go to state 34
    formals                        shift and go to state 35
    TYPE                           shift and go to state 36
    G                              shift and go to state 17

state 32

    (10) fielddecl -> TYPE ID C FINALIZADOR .

    VOID            reduce using rule 10 (fielddecl -> TYPE ID C FINALIZADOR .)
    INT             reduce using rule 10 (fielddecl -> TYPE ID C FINALIZADOR .)
    BOOLEAN         reduce using rule 10 (fielddecl -> TYPE ID C FINALIZADOR .)
    STRING          reduce using rule 10 (fielddecl -> TYPE ID C FINALIZADOR .)
    ID              reduce using rule 10 (fielddecl -> TYPE ID C FINALIZADOR .)
    LLAVEDER        reduce using rule 10 (fielddecl -> TYPE ID C FINALIZADOR .)


state 33

    (11) C -> COMA ID . C
    (11) C -> . COMA ID C
    (12) C -> .

    COMA            shift and go to state 29
    FINALIZADOR     reduce using rule 12 (C -> .)

    C                              shift and go to state 37

state 34

    (13) methdecl -> D ID PARENTIZQ E . PARENTDER block

    PARENTDER       shift and go to state 38


state 35

    (16) E -> formals .

    PARENTDER       reduce using rule 16 (E -> formals .)


state 36

    (18) formals -> TYPE . ID F
    (26) G -> TYPE . CORCHIZQ CORCHDER

    ID              shift and go to state 39
    CORCHIZQ        shift and go to state 26


state 37

    (11) C -> COMA ID C .

    FINALIZADOR     reduce using rule 11 (C -> COMA ID C .)


state 38

    (13) methdecl -> D ID PARENTIZQ E PARENTDER . block
    (27) block -> . LLAVEIZQ H I LLAVEDER

    LLAVEIZQ        shift and go to state 41

    block                          shift and go to state 40

state 39

    (18) formals -> TYPE ID . F
    (19) F -> . COMA TYPE ID F
    (20) F -> .

    COMA            shift and go to state 43
    PARENTDER       reduce using rule 20 (F -> .)

    F                              shift and go to state 42

state 40

    (13) methdecl -> D ID PARENTIZQ E PARENTDER block .

    VOID            reduce using rule 13 (methdecl -> D ID PARENTIZQ E PARENTDER block .)
    INT             reduce using rule 13 (methdecl -> D ID PARENTIZQ E PARENTDER block .)
    BOOLEAN         reduce using rule 13 (methdecl -> D ID PARENTIZQ E PARENTDER block .)
    STRING          reduce using rule 13 (methdecl -> D ID PARENTIZQ E PARENTDER block .)
    ID              reduce using rule 13 (methdecl -> D ID PARENTIZQ E PARENTDER block .)
    LLAVEDER        reduce using rule 13 (methdecl -> D ID PARENTIZQ E PARENTDER block .)


state 41

    (27) block -> LLAVEIZQ . H I LLAVEDER
    (28) H -> . vardecl H
    (29) H -> .
    (32) vardecl -> . TYPE ID J L FINALIZADOR
    (21) TYPE -> . G
    (22) G -> . INT
    (23) G -> . BOOLEAN
    (24) G -> . STRING
    (25) G -> . ID
    (26) G -> . TYPE CORCHIZQ CORCHDER

  ! shift/reduce conflict for ID resolved as shift
    RETURN          reduce using rule 29 (H -> .)
    IF              reduce using rule 29 (H -> .)
    WHILE           reduce using rule 29 (H -> .)
    BREAK           reduce using rule 29 (H -> .)
    CONTINUE        reduce using rule 29 (H -> .)
    LLAVEIZQ        reduce using rule 29 (H -> .)
    THIS            reduce using rule 29 (H -> .)
    NEW             reduce using rule 29 (H -> .)
    PARENTIZQ       reduce using rule 29 (H -> .)
    NEGLOGICA       reduce using rule 29 (H -> .)
    NUMERO          reduce using rule 29 (H -> .)
    CADENA          reduce using rule 29 (H -> .)
    TRUE            reduce using rule 29 (H -> .)
    FALSE           reduce using rule 29 (H -> .)
    NULL            reduce using rule 29 (H -> .)
    LLAVEDER        reduce using rule 29 (H -> .)
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 11

  ! ID              [ reduce using rule 29 (H -> .) ]

    H                              shift and go to state 44
    vardecl                        shift and go to state 45
    TYPE                           shift and go to state 46
    G                              shift and go to state 17

state 42

    (18) formals -> TYPE ID F .

    PARENTDER       reduce using rule 18 (formals -> TYPE ID F .)


state 43

    (19) F -> COMA . TYPE ID F
    (21) TYPE -> . G
    (22) G -> . INT
    (23) G -> . BOOLEAN
    (24) G -> . STRING
    (25) G -> . ID
    (26) G -> . TYPE CORCHIZQ CORCHDER

    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 11

    TYPE                           shift and go to state 47
    G                              shift and go to state 17

state 44

    (27) block -> LLAVEIZQ H . I LLAVEDER
    (30) I -> . stmt I
    (31) I -> .
    (38) stmt -> . M
    (39) M -> . assign FINALIZADOR
    (40) M -> . call FINALIZADOR
    (41) M -> . RETURN N
    (42) M -> . IF PARENTIZQ expr PARENTDER stmt O
    (43) M -> . WHILE PARENTIZQ expr PARENTDER stmt
    (44) M -> . BREAK FINALIZADOR
    (45) M -> . CONTINUE FINALIZADOR
    (46) M -> . block
    (51) assign -> . location ASIGNAR expr
    (58) call -> . method PARENTIZQ Q PARENTDER
    (27) block -> . LLAVEIZQ H I LLAVEDER
    (52) location -> . method
    (53) location -> . Pprima
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (55) P -> . ID
    (56) P -> . expr ACCESO ID
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL

    LLAVEDER        reduce using rule 31 (I -> .)
    RETURN          shift and go to state 53
    IF              shift and go to state 54
    WHILE           shift and go to state 57
    BREAK           shift and go to state 58
    CONTINUE        shift and go to state 59
    LLAVEIZQ        shift and go to state 41
    ID              shift and go to state 65
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77

    I                              shift and go to state 48
    stmt                           shift and go to state 49
    M                              shift and go to state 50
    assign                         shift and go to state 51
    call                           shift and go to state 52
    expr                           shift and go to state 56
    block                          shift and go to state 60
    location                       shift and go to state 61
    method                         shift and go to state 62
    Pprima                         shift and go to state 63
    P                              shift and go to state 64
    T                              shift and go to state 66
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    V                              shift and go to state 72

state 45

    (28) H -> vardecl . H
    (28) H -> . vardecl H
    (29) H -> .
    (32) vardecl -> . TYPE ID J L FINALIZADOR
    (21) TYPE -> . G
    (22) G -> . INT
    (23) G -> . BOOLEAN
    (24) G -> . STRING
    (25) G -> . ID
    (26) G -> . TYPE CORCHIZQ CORCHDER

  ! shift/reduce conflict for ID resolved as shift
    RETURN          reduce using rule 29 (H -> .)
    IF              reduce using rule 29 (H -> .)
    WHILE           reduce using rule 29 (H -> .)
    BREAK           reduce using rule 29 (H -> .)
    CONTINUE        reduce using rule 29 (H -> .)
    LLAVEIZQ        reduce using rule 29 (H -> .)
    THIS            reduce using rule 29 (H -> .)
    NEW             reduce using rule 29 (H -> .)
    PARENTIZQ       reduce using rule 29 (H -> .)
    NEGLOGICA       reduce using rule 29 (H -> .)
    NUMERO          reduce using rule 29 (H -> .)
    CADENA          reduce using rule 29 (H -> .)
    TRUE            reduce using rule 29 (H -> .)
    FALSE           reduce using rule 29 (H -> .)
    NULL            reduce using rule 29 (H -> .)
    LLAVEDER        reduce using rule 29 (H -> .)
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 11

  ! ID              [ reduce using rule 29 (H -> .) ]

    vardecl                        shift and go to state 45
    H                              shift and go to state 78
    TYPE                           shift and go to state 46
    G                              shift and go to state 17

state 46

    (32) vardecl -> TYPE . ID J L FINALIZADOR
    (26) G -> TYPE . CORCHIZQ CORCHDER

    ID              shift and go to state 79
    CORCHIZQ        shift and go to state 26


state 47

    (19) F -> COMA TYPE . ID F
    (26) G -> TYPE . CORCHIZQ CORCHDER

    ID              shift and go to state 80
    CORCHIZQ        shift and go to state 26


state 48

    (27) block -> LLAVEIZQ H I . LLAVEDER

    LLAVEDER        shift and go to state 81


state 49

    (30) I -> stmt . I
    (30) I -> . stmt I
    (31) I -> .
    (38) stmt -> . M
    (39) M -> . assign FINALIZADOR
    (40) M -> . call FINALIZADOR
    (41) M -> . RETURN N
    (42) M -> . IF PARENTIZQ expr PARENTDER stmt O
    (43) M -> . WHILE PARENTIZQ expr PARENTDER stmt
    (44) M -> . BREAK FINALIZADOR
    (45) M -> . CONTINUE FINALIZADOR
    (46) M -> . block
    (51) assign -> . location ASIGNAR expr
    (58) call -> . method PARENTIZQ Q PARENTDER
    (27) block -> . LLAVEIZQ H I LLAVEDER
    (52) location -> . method
    (53) location -> . Pprima
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (55) P -> . ID
    (56) P -> . expr ACCESO ID
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL

    LLAVEDER        reduce using rule 31 (I -> .)
    RETURN          shift and go to state 53
    IF              shift and go to state 54
    WHILE           shift and go to state 57
    BREAK           shift and go to state 58
    CONTINUE        shift and go to state 59
    LLAVEIZQ        shift and go to state 41
    ID              shift and go to state 65
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77

    stmt                           shift and go to state 49
    I                              shift and go to state 82
    M                              shift and go to state 50
    assign                         shift and go to state 51
    call                           shift and go to state 52
    expr                           shift and go to state 56
    block                          shift and go to state 60
    location                       shift and go to state 61
    method                         shift and go to state 62
    Pprima                         shift and go to state 63
    P                              shift and go to state 64
    T                              shift and go to state 66
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    V                              shift and go to state 72

state 50

    (38) stmt -> M .

    RETURN          reduce using rule 38 (stmt -> M .)
    IF              reduce using rule 38 (stmt -> M .)
    WHILE           reduce using rule 38 (stmt -> M .)
    BREAK           reduce using rule 38 (stmt -> M .)
    CONTINUE        reduce using rule 38 (stmt -> M .)
    LLAVEIZQ        reduce using rule 38 (stmt -> M .)
    ID              reduce using rule 38 (stmt -> M .)
    THIS            reduce using rule 38 (stmt -> M .)
    NEW             reduce using rule 38 (stmt -> M .)
    PARENTIZQ       reduce using rule 38 (stmt -> M .)
    NEGLOGICA       reduce using rule 38 (stmt -> M .)
    NUMERO          reduce using rule 38 (stmt -> M .)
    CADENA          reduce using rule 38 (stmt -> M .)
    TRUE            reduce using rule 38 (stmt -> M .)
    FALSE           reduce using rule 38 (stmt -> M .)
    NULL            reduce using rule 38 (stmt -> M .)
    LLAVEDER        reduce using rule 38 (stmt -> M .)
    ELSE            reduce using rule 38 (stmt -> M .)


state 51

    (39) M -> assign . FINALIZADOR

    FINALIZADOR     shift and go to state 83


state 52

    (40) M -> call . FINALIZADOR
    (66) T -> call .

    FINALIZADOR     shift and go to state 84
    CORCHIZQ        reduce using rule 66 (T -> call .)
    ACCESO          reduce using rule 66 (T -> call .)
    MODULO          reduce using rule 66 (T -> call .)
    YAND            reduce using rule 66 (T -> call .)
    OOR             reduce using rule 66 (T -> call .)
    MENORQUE        reduce using rule 66 (T -> call .)
    MENORIGUAL      reduce using rule 66 (T -> call .)
    MAYORQUE        reduce using rule 66 (T -> call .)
    MAYORIGUAL      reduce using rule 66 (T -> call .)
    COMPIGUAL       reduce using rule 66 (T -> call .)
    COMPDIFERENTE   reduce using rule 66 (T -> call .)
    PLUS            reduce using rule 66 (T -> call .)
    MINUS           reduce using rule 66 (T -> call .)
    POR             reduce using rule 66 (T -> call .)
    DIVIDE          reduce using rule 66 (T -> call .)


state 53

    (41) M -> RETURN . N
    (47) N -> . expr
    (48) N -> .
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PARENTIZQ resolved as shift
  ! shift/reduce conflict for NEGLOGICA resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RETURN          reduce using rule 48 (N -> .)
    IF              reduce using rule 48 (N -> .)
    WHILE           reduce using rule 48 (N -> .)
    BREAK           reduce using rule 48 (N -> .)
    CONTINUE        reduce using rule 48 (N -> .)
    LLAVEIZQ        reduce using rule 48 (N -> .)
    LLAVEDER        reduce using rule 48 (N -> .)
    ELSE            reduce using rule 48 (N -> .)
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

  ! ID              [ reduce using rule 48 (N -> .) ]
  ! THIS            [ reduce using rule 48 (N -> .) ]
  ! NEW             [ reduce using rule 48 (N -> .) ]
  ! PARENTIZQ       [ reduce using rule 48 (N -> .) ]
  ! NEGLOGICA       [ reduce using rule 48 (N -> .) ]
  ! NUMERO          [ reduce using rule 48 (N -> .) ]
  ! CADENA          [ reduce using rule 48 (N -> .) ]
  ! TRUE            [ reduce using rule 48 (N -> .) ]
  ! FALSE           [ reduce using rule 48 (N -> .) ]
  ! NULL            [ reduce using rule 48 (N -> .) ]

    N                              shift and go to state 85
    expr                           shift and go to state 86
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 54

    (42) M -> IF . PARENTIZQ expr PARENTDER stmt O

    PARENTIZQ       shift and go to state 90


state 55

    (74) T -> PARENTIZQ . expr PARENTDER
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    expr                           shift and go to state 91
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 56

    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

    CORCHIZQ        shift and go to state 92
    ACCESO          shift and go to state 93
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 57

    (43) M -> WHILE . PARENTIZQ expr PARENTDER stmt

    PARENTIZQ       shift and go to state 109


state 58

    (44) M -> BREAK . FINALIZADOR

    FINALIZADOR     shift and go to state 110


state 59

    (45) M -> CONTINUE . FINALIZADOR

    FINALIZADOR     shift and go to state 111


state 60

    (46) M -> block .

    RETURN          reduce using rule 46 (M -> block .)
    IF              reduce using rule 46 (M -> block .)
    WHILE           reduce using rule 46 (M -> block .)
    BREAK           reduce using rule 46 (M -> block .)
    CONTINUE        reduce using rule 46 (M -> block .)
    LLAVEIZQ        reduce using rule 46 (M -> block .)
    ID              reduce using rule 46 (M -> block .)
    THIS            reduce using rule 46 (M -> block .)
    NEW             reduce using rule 46 (M -> block .)
    PARENTIZQ       reduce using rule 46 (M -> block .)
    NEGLOGICA       reduce using rule 46 (M -> block .)
    NUMERO          reduce using rule 46 (M -> block .)
    CADENA          reduce using rule 46 (M -> block .)
    TRUE            reduce using rule 46 (M -> block .)
    FALSE           reduce using rule 46 (M -> block .)
    NULL            reduce using rule 46 (M -> block .)
    LLAVEDER        reduce using rule 46 (M -> block .)
    ELSE            reduce using rule 46 (M -> block .)


state 61

    (51) assign -> location . ASIGNAR expr
    (65) T -> location .

    ASIGNAR         shift and go to state 112
    CORCHIZQ        reduce using rule 65 (T -> location .)
    ACCESO          reduce using rule 65 (T -> location .)
    MODULO          reduce using rule 65 (T -> location .)
    YAND            reduce using rule 65 (T -> location .)
    OOR             reduce using rule 65 (T -> location .)
    MENORQUE        reduce using rule 65 (T -> location .)
    MENORIGUAL      reduce using rule 65 (T -> location .)
    MAYORQUE        reduce using rule 65 (T -> location .)
    MAYORIGUAL      reduce using rule 65 (T -> location .)
    COMPIGUAL       reduce using rule 65 (T -> location .)
    COMPDIFERENTE   reduce using rule 65 (T -> location .)
    PLUS            reduce using rule 65 (T -> location .)
    MINUS           reduce using rule 65 (T -> location .)
    POR             reduce using rule 65 (T -> location .)
    DIVIDE          reduce using rule 65 (T -> location .)


state 62

    (58) call -> method . PARENTIZQ Q PARENTDER
    (52) location -> method .

    PARENTIZQ       shift and go to state 113
    ASIGNAR         reduce using rule 52 (location -> method .)
    CORCHIZQ        reduce using rule 52 (location -> method .)
    ACCESO          reduce using rule 52 (location -> method .)
    MODULO          reduce using rule 52 (location -> method .)
    YAND            reduce using rule 52 (location -> method .)
    OOR             reduce using rule 52 (location -> method .)
    MENORQUE        reduce using rule 52 (location -> method .)
    MENORIGUAL      reduce using rule 52 (location -> method .)
    MAYORQUE        reduce using rule 52 (location -> method .)
    MAYORIGUAL      reduce using rule 52 (location -> method .)
    COMPIGUAL       reduce using rule 52 (location -> method .)
    COMPDIFERENTE   reduce using rule 52 (location -> method .)
    PLUS            reduce using rule 52 (location -> method .)
    MINUS           reduce using rule 52 (location -> method .)
    POR             reduce using rule 52 (location -> method .)
    DIVIDE          reduce using rule 52 (location -> method .)


state 63

    (53) location -> Pprima .

    ASIGNAR         reduce using rule 53 (location -> Pprima .)
    CORCHIZQ        reduce using rule 53 (location -> Pprima .)
    ACCESO          reduce using rule 53 (location -> Pprima .)
    MODULO          reduce using rule 53 (location -> Pprima .)
    YAND            reduce using rule 53 (location -> Pprima .)
    OOR             reduce using rule 53 (location -> Pprima .)
    MENORQUE        reduce using rule 53 (location -> Pprima .)
    MENORIGUAL      reduce using rule 53 (location -> Pprima .)
    MAYORQUE        reduce using rule 53 (location -> Pprima .)
    MAYORIGUAL      reduce using rule 53 (location -> Pprima .)
    COMPIGUAL       reduce using rule 53 (location -> Pprima .)
    COMPDIFERENTE   reduce using rule 53 (location -> Pprima .)
    PLUS            reduce using rule 53 (location -> Pprima .)
    MINUS           reduce using rule 53 (location -> Pprima .)
    POR             reduce using rule 53 (location -> Pprima .)
    DIVIDE          reduce using rule 53 (location -> Pprima .)
    RETURN          reduce using rule 53 (location -> Pprima .)
    IF              reduce using rule 53 (location -> Pprima .)
    WHILE           reduce using rule 53 (location -> Pprima .)
    BREAK           reduce using rule 53 (location -> Pprima .)
    CONTINUE        reduce using rule 53 (location -> Pprima .)
    LLAVEIZQ        reduce using rule 53 (location -> Pprima .)
    ID              reduce using rule 53 (location -> Pprima .)
    THIS            reduce using rule 53 (location -> Pprima .)
    NEW             reduce using rule 53 (location -> Pprima .)
    PARENTIZQ       reduce using rule 53 (location -> Pprima .)
    NEGLOGICA       reduce using rule 53 (location -> Pprima .)
    NUMERO          reduce using rule 53 (location -> Pprima .)
    CADENA          reduce using rule 53 (location -> Pprima .)
    TRUE            reduce using rule 53 (location -> Pprima .)
    FALSE           reduce using rule 53 (location -> Pprima .)
    NULL            reduce using rule 53 (location -> Pprima .)
    LLAVEDER        reduce using rule 53 (location -> Pprima .)
    ELSE            reduce using rule 53 (location -> Pprima .)
    PARENTDER       reduce using rule 53 (location -> Pprima .)
    CORCHDER        reduce using rule 53 (location -> Pprima .)
    FINALIZADOR     reduce using rule 53 (location -> Pprima .)
    COMA            reduce using rule 53 (location -> Pprima .)


state 64

    (54) method -> P .

    PARENTIZQ       reduce using rule 54 (method -> P .)
    ASIGNAR         reduce using rule 54 (method -> P .)
    CORCHIZQ        reduce using rule 54 (method -> P .)
    ACCESO          reduce using rule 54 (method -> P .)
    MODULO          reduce using rule 54 (method -> P .)
    YAND            reduce using rule 54 (method -> P .)
    OOR             reduce using rule 54 (method -> P .)
    MENORQUE        reduce using rule 54 (method -> P .)
    MENORIGUAL      reduce using rule 54 (method -> P .)
    MAYORQUE        reduce using rule 54 (method -> P .)
    MAYORIGUAL      reduce using rule 54 (method -> P .)
    COMPIGUAL       reduce using rule 54 (method -> P .)
    COMPDIFERENTE   reduce using rule 54 (method -> P .)
    PLUS            reduce using rule 54 (method -> P .)
    MINUS           reduce using rule 54 (method -> P .)
    POR             reduce using rule 54 (method -> P .)
    DIVIDE          reduce using rule 54 (method -> P .)
    RETURN          reduce using rule 54 (method -> P .)
    IF              reduce using rule 54 (method -> P .)
    WHILE           reduce using rule 54 (method -> P .)
    BREAK           reduce using rule 54 (method -> P .)
    CONTINUE        reduce using rule 54 (method -> P .)
    LLAVEIZQ        reduce using rule 54 (method -> P .)
    ID              reduce using rule 54 (method -> P .)
    THIS            reduce using rule 54 (method -> P .)
    NEW             reduce using rule 54 (method -> P .)
    NEGLOGICA       reduce using rule 54 (method -> P .)
    NUMERO          reduce using rule 54 (method -> P .)
    CADENA          reduce using rule 54 (method -> P .)
    TRUE            reduce using rule 54 (method -> P .)
    FALSE           reduce using rule 54 (method -> P .)
    NULL            reduce using rule 54 (method -> P .)
    LLAVEDER        reduce using rule 54 (method -> P .)
    ELSE            reduce using rule 54 (method -> P .)
    PARENTDER       reduce using rule 54 (method -> P .)
    CORCHDER        reduce using rule 54 (method -> P .)
    FINALIZADOR     reduce using rule 54 (method -> P .)
    COMA            reduce using rule 54 (method -> P .)


state 65

    (55) P -> ID .

    PARENTIZQ       reduce using rule 55 (P -> ID .)
    ASIGNAR         reduce using rule 55 (P -> ID .)
    CORCHIZQ        reduce using rule 55 (P -> ID .)
    ACCESO          reduce using rule 55 (P -> ID .)
    MODULO          reduce using rule 55 (P -> ID .)
    YAND            reduce using rule 55 (P -> ID .)
    OOR             reduce using rule 55 (P -> ID .)
    MENORQUE        reduce using rule 55 (P -> ID .)
    MENORIGUAL      reduce using rule 55 (P -> ID .)
    MAYORQUE        reduce using rule 55 (P -> ID .)
    MAYORIGUAL      reduce using rule 55 (P -> ID .)
    COMPIGUAL       reduce using rule 55 (P -> ID .)
    COMPDIFERENTE   reduce using rule 55 (P -> ID .)
    PLUS            reduce using rule 55 (P -> ID .)
    MINUS           reduce using rule 55 (P -> ID .)
    POR             reduce using rule 55 (P -> ID .)
    DIVIDE          reduce using rule 55 (P -> ID .)
    RETURN          reduce using rule 55 (P -> ID .)
    IF              reduce using rule 55 (P -> ID .)
    WHILE           reduce using rule 55 (P -> ID .)
    BREAK           reduce using rule 55 (P -> ID .)
    CONTINUE        reduce using rule 55 (P -> ID .)
    LLAVEIZQ        reduce using rule 55 (P -> ID .)
    ID              reduce using rule 55 (P -> ID .)
    THIS            reduce using rule 55 (P -> ID .)
    NEW             reduce using rule 55 (P -> ID .)
    NEGLOGICA       reduce using rule 55 (P -> ID .)
    NUMERO          reduce using rule 55 (P -> ID .)
    CADENA          reduce using rule 55 (P -> ID .)
    TRUE            reduce using rule 55 (P -> ID .)
    FALSE           reduce using rule 55 (P -> ID .)
    NULL            reduce using rule 55 (P -> ID .)
    LLAVEDER        reduce using rule 55 (P -> ID .)
    ELSE            reduce using rule 55 (P -> ID .)
    PARENTDER       reduce using rule 55 (P -> ID .)
    CORCHDER        reduce using rule 55 (P -> ID .)
    FINALIZADOR     reduce using rule 55 (P -> ID .)
    COMA            reduce using rule 55 (P -> ID .)


state 66

    (64) expr -> T .

    CORCHIZQ        reduce using rule 64 (expr -> T .)
    ACCESO          reduce using rule 64 (expr -> T .)
    MODULO          reduce using rule 64 (expr -> T .)
    YAND            reduce using rule 64 (expr -> T .)
    OOR             reduce using rule 64 (expr -> T .)
    MENORQUE        reduce using rule 64 (expr -> T .)
    MENORIGUAL      reduce using rule 64 (expr -> T .)
    MAYORQUE        reduce using rule 64 (expr -> T .)
    MAYORIGUAL      reduce using rule 64 (expr -> T .)
    COMPIGUAL       reduce using rule 64 (expr -> T .)
    COMPDIFERENTE   reduce using rule 64 (expr -> T .)
    PLUS            reduce using rule 64 (expr -> T .)
    MINUS           reduce using rule 64 (expr -> T .)
    POR             reduce using rule 64 (expr -> T .)
    DIVIDE          reduce using rule 64 (expr -> T .)
    RETURN          reduce using rule 64 (expr -> T .)
    IF              reduce using rule 64 (expr -> T .)
    WHILE           reduce using rule 64 (expr -> T .)
    BREAK           reduce using rule 64 (expr -> T .)
    CONTINUE        reduce using rule 64 (expr -> T .)
    LLAVEIZQ        reduce using rule 64 (expr -> T .)
    ID              reduce using rule 64 (expr -> T .)
    THIS            reduce using rule 64 (expr -> T .)
    NEW             reduce using rule 64 (expr -> T .)
    PARENTIZQ       reduce using rule 64 (expr -> T .)
    NEGLOGICA       reduce using rule 64 (expr -> T .)
    NUMERO          reduce using rule 64 (expr -> T .)
    CADENA          reduce using rule 64 (expr -> T .)
    TRUE            reduce using rule 64 (expr -> T .)
    FALSE           reduce using rule 64 (expr -> T .)
    NULL            reduce using rule 64 (expr -> T .)
    LLAVEDER        reduce using rule 64 (expr -> T .)
    ELSE            reduce using rule 64 (expr -> T .)
    PARENTDER       reduce using rule 64 (expr -> T .)
    CORCHDER        reduce using rule 64 (expr -> T .)
    FINALIZADOR     reduce using rule 64 (expr -> T .)
    COMA            reduce using rule 64 (expr -> T .)


state 67

    (67) T -> THIS .

    CORCHIZQ        reduce using rule 67 (T -> THIS .)
    ACCESO          reduce using rule 67 (T -> THIS .)
    MODULO          reduce using rule 67 (T -> THIS .)
    YAND            reduce using rule 67 (T -> THIS .)
    OOR             reduce using rule 67 (T -> THIS .)
    MENORQUE        reduce using rule 67 (T -> THIS .)
    MENORIGUAL      reduce using rule 67 (T -> THIS .)
    MAYORQUE        reduce using rule 67 (T -> THIS .)
    MAYORIGUAL      reduce using rule 67 (T -> THIS .)
    COMPIGUAL       reduce using rule 67 (T -> THIS .)
    COMPDIFERENTE   reduce using rule 67 (T -> THIS .)
    PLUS            reduce using rule 67 (T -> THIS .)
    MINUS           reduce using rule 67 (T -> THIS .)
    POR             reduce using rule 67 (T -> THIS .)
    DIVIDE          reduce using rule 67 (T -> THIS .)
    RETURN          reduce using rule 67 (T -> THIS .)
    IF              reduce using rule 67 (T -> THIS .)
    WHILE           reduce using rule 67 (T -> THIS .)
    BREAK           reduce using rule 67 (T -> THIS .)
    CONTINUE        reduce using rule 67 (T -> THIS .)
    LLAVEIZQ        reduce using rule 67 (T -> THIS .)
    ID              reduce using rule 67 (T -> THIS .)
    THIS            reduce using rule 67 (T -> THIS .)
    NEW             reduce using rule 67 (T -> THIS .)
    PARENTIZQ       reduce using rule 67 (T -> THIS .)
    NEGLOGICA       reduce using rule 67 (T -> THIS .)
    NUMERO          reduce using rule 67 (T -> THIS .)
    CADENA          reduce using rule 67 (T -> THIS .)
    TRUE            reduce using rule 67 (T -> THIS .)
    FALSE           reduce using rule 67 (T -> THIS .)
    NULL            reduce using rule 67 (T -> THIS .)
    LLAVEDER        reduce using rule 67 (T -> THIS .)
    ELSE            reduce using rule 67 (T -> THIS .)
    PARENTDER       reduce using rule 67 (T -> THIS .)
    CORCHDER        reduce using rule 67 (T -> THIS .)
    FINALIZADOR     reduce using rule 67 (T -> THIS .)
    COMA            reduce using rule 67 (T -> THIS .)


state 68

    (68) T -> NEW . ID PARENTIZQ PARENTDER
    (69) T -> NEW . TYPE CORCHIZQ expr CORCHDER
    (21) TYPE -> . G
    (22) G -> . INT
    (23) G -> . BOOLEAN
    (24) G -> . STRING
    (25) G -> . ID
    (26) G -> . TYPE CORCHIZQ CORCHDER

    ID              shift and go to state 114
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 21

    TYPE                           shift and go to state 115
    G                              shift and go to state 17

state 69

    (72) T -> unary . expr
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    unary                          shift and go to state 69
    expr                           shift and go to state 116
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 70

    (73) T -> literal .

    CORCHIZQ        reduce using rule 73 (T -> literal .)
    ACCESO          reduce using rule 73 (T -> literal .)
    MODULO          reduce using rule 73 (T -> literal .)
    YAND            reduce using rule 73 (T -> literal .)
    OOR             reduce using rule 73 (T -> literal .)
    MENORQUE        reduce using rule 73 (T -> literal .)
    MENORIGUAL      reduce using rule 73 (T -> literal .)
    MAYORQUE        reduce using rule 73 (T -> literal .)
    MAYORIGUAL      reduce using rule 73 (T -> literal .)
    COMPIGUAL       reduce using rule 73 (T -> literal .)
    COMPDIFERENTE   reduce using rule 73 (T -> literal .)
    PLUS            reduce using rule 73 (T -> literal .)
    MINUS           reduce using rule 73 (T -> literal .)
    POR             reduce using rule 73 (T -> literal .)
    DIVIDE          reduce using rule 73 (T -> literal .)
    RETURN          reduce using rule 73 (T -> literal .)
    IF              reduce using rule 73 (T -> literal .)
    WHILE           reduce using rule 73 (T -> literal .)
    BREAK           reduce using rule 73 (T -> literal .)
    CONTINUE        reduce using rule 73 (T -> literal .)
    LLAVEIZQ        reduce using rule 73 (T -> literal .)
    ID              reduce using rule 73 (T -> literal .)
    THIS            reduce using rule 73 (T -> literal .)
    NEW             reduce using rule 73 (T -> literal .)
    PARENTIZQ       reduce using rule 73 (T -> literal .)
    NEGLOGICA       reduce using rule 73 (T -> literal .)
    NUMERO          reduce using rule 73 (T -> literal .)
    CADENA          reduce using rule 73 (T -> literal .)
    TRUE            reduce using rule 73 (T -> literal .)
    FALSE           reduce using rule 73 (T -> literal .)
    NULL            reduce using rule 73 (T -> literal .)
    LLAVEDER        reduce using rule 73 (T -> literal .)
    ELSE            reduce using rule 73 (T -> literal .)
    PARENTDER       reduce using rule 73 (T -> literal .)
    CORCHDER        reduce using rule 73 (T -> literal .)
    FINALIZADOR     reduce using rule 73 (T -> literal .)
    COMA            reduce using rule 73 (T -> literal .)


state 71

    (89) unary -> NEGLOGICA .

    THIS            reduce using rule 89 (unary -> NEGLOGICA .)
    NEW             reduce using rule 89 (unary -> NEGLOGICA .)
    PARENTIZQ       reduce using rule 89 (unary -> NEGLOGICA .)
    NEGLOGICA       reduce using rule 89 (unary -> NEGLOGICA .)
    NUMERO          reduce using rule 89 (unary -> NEGLOGICA .)
    CADENA          reduce using rule 89 (unary -> NEGLOGICA .)
    TRUE            reduce using rule 89 (unary -> NEGLOGICA .)
    FALSE           reduce using rule 89 (unary -> NEGLOGICA .)
    NULL            reduce using rule 89 (unary -> NEGLOGICA .)
    ID              reduce using rule 89 (unary -> NEGLOGICA .)


state 72

    (90) literal -> V .

    CORCHIZQ        reduce using rule 90 (literal -> V .)
    ACCESO          reduce using rule 90 (literal -> V .)
    MODULO          reduce using rule 90 (literal -> V .)
    YAND            reduce using rule 90 (literal -> V .)
    OOR             reduce using rule 90 (literal -> V .)
    MENORQUE        reduce using rule 90 (literal -> V .)
    MENORIGUAL      reduce using rule 90 (literal -> V .)
    MAYORQUE        reduce using rule 90 (literal -> V .)
    MAYORIGUAL      reduce using rule 90 (literal -> V .)
    COMPIGUAL       reduce using rule 90 (literal -> V .)
    COMPDIFERENTE   reduce using rule 90 (literal -> V .)
    PLUS            reduce using rule 90 (literal -> V .)
    MINUS           reduce using rule 90 (literal -> V .)
    POR             reduce using rule 90 (literal -> V .)
    DIVIDE          reduce using rule 90 (literal -> V .)
    RETURN          reduce using rule 90 (literal -> V .)
    IF              reduce using rule 90 (literal -> V .)
    WHILE           reduce using rule 90 (literal -> V .)
    BREAK           reduce using rule 90 (literal -> V .)
    CONTINUE        reduce using rule 90 (literal -> V .)
    LLAVEIZQ        reduce using rule 90 (literal -> V .)
    ID              reduce using rule 90 (literal -> V .)
    THIS            reduce using rule 90 (literal -> V .)
    NEW             reduce using rule 90 (literal -> V .)
    PARENTIZQ       reduce using rule 90 (literal -> V .)
    NEGLOGICA       reduce using rule 90 (literal -> V .)
    NUMERO          reduce using rule 90 (literal -> V .)
    CADENA          reduce using rule 90 (literal -> V .)
    TRUE            reduce using rule 90 (literal -> V .)
    FALSE           reduce using rule 90 (literal -> V .)
    NULL            reduce using rule 90 (literal -> V .)
    LLAVEDER        reduce using rule 90 (literal -> V .)
    ELSE            reduce using rule 90 (literal -> V .)
    PARENTDER       reduce using rule 90 (literal -> V .)
    CORCHDER        reduce using rule 90 (literal -> V .)
    FINALIZADOR     reduce using rule 90 (literal -> V .)
    COMA            reduce using rule 90 (literal -> V .)


state 73

    (91) V -> NUMERO .

    CORCHIZQ        reduce using rule 91 (V -> NUMERO .)
    ACCESO          reduce using rule 91 (V -> NUMERO .)
    MODULO          reduce using rule 91 (V -> NUMERO .)
    YAND            reduce using rule 91 (V -> NUMERO .)
    OOR             reduce using rule 91 (V -> NUMERO .)
    MENORQUE        reduce using rule 91 (V -> NUMERO .)
    MENORIGUAL      reduce using rule 91 (V -> NUMERO .)
    MAYORQUE        reduce using rule 91 (V -> NUMERO .)
    MAYORIGUAL      reduce using rule 91 (V -> NUMERO .)
    COMPIGUAL       reduce using rule 91 (V -> NUMERO .)
    COMPDIFERENTE   reduce using rule 91 (V -> NUMERO .)
    PLUS            reduce using rule 91 (V -> NUMERO .)
    MINUS           reduce using rule 91 (V -> NUMERO .)
    POR             reduce using rule 91 (V -> NUMERO .)
    DIVIDE          reduce using rule 91 (V -> NUMERO .)
    RETURN          reduce using rule 91 (V -> NUMERO .)
    IF              reduce using rule 91 (V -> NUMERO .)
    WHILE           reduce using rule 91 (V -> NUMERO .)
    BREAK           reduce using rule 91 (V -> NUMERO .)
    CONTINUE        reduce using rule 91 (V -> NUMERO .)
    LLAVEIZQ        reduce using rule 91 (V -> NUMERO .)
    ID              reduce using rule 91 (V -> NUMERO .)
    THIS            reduce using rule 91 (V -> NUMERO .)
    NEW             reduce using rule 91 (V -> NUMERO .)
    PARENTIZQ       reduce using rule 91 (V -> NUMERO .)
    NEGLOGICA       reduce using rule 91 (V -> NUMERO .)
    NUMERO          reduce using rule 91 (V -> NUMERO .)
    CADENA          reduce using rule 91 (V -> NUMERO .)
    TRUE            reduce using rule 91 (V -> NUMERO .)
    FALSE           reduce using rule 91 (V -> NUMERO .)
    NULL            reduce using rule 91 (V -> NUMERO .)
    LLAVEDER        reduce using rule 91 (V -> NUMERO .)
    ELSE            reduce using rule 91 (V -> NUMERO .)
    PARENTDER       reduce using rule 91 (V -> NUMERO .)
    CORCHDER        reduce using rule 91 (V -> NUMERO .)
    FINALIZADOR     reduce using rule 91 (V -> NUMERO .)
    COMA            reduce using rule 91 (V -> NUMERO .)


state 74

    (92) V -> CADENA .

    CORCHIZQ        reduce using rule 92 (V -> CADENA .)
    ACCESO          reduce using rule 92 (V -> CADENA .)
    MODULO          reduce using rule 92 (V -> CADENA .)
    YAND            reduce using rule 92 (V -> CADENA .)
    OOR             reduce using rule 92 (V -> CADENA .)
    MENORQUE        reduce using rule 92 (V -> CADENA .)
    MENORIGUAL      reduce using rule 92 (V -> CADENA .)
    MAYORQUE        reduce using rule 92 (V -> CADENA .)
    MAYORIGUAL      reduce using rule 92 (V -> CADENA .)
    COMPIGUAL       reduce using rule 92 (V -> CADENA .)
    COMPDIFERENTE   reduce using rule 92 (V -> CADENA .)
    PLUS            reduce using rule 92 (V -> CADENA .)
    MINUS           reduce using rule 92 (V -> CADENA .)
    POR             reduce using rule 92 (V -> CADENA .)
    DIVIDE          reduce using rule 92 (V -> CADENA .)
    RETURN          reduce using rule 92 (V -> CADENA .)
    IF              reduce using rule 92 (V -> CADENA .)
    WHILE           reduce using rule 92 (V -> CADENA .)
    BREAK           reduce using rule 92 (V -> CADENA .)
    CONTINUE        reduce using rule 92 (V -> CADENA .)
    LLAVEIZQ        reduce using rule 92 (V -> CADENA .)
    ID              reduce using rule 92 (V -> CADENA .)
    THIS            reduce using rule 92 (V -> CADENA .)
    NEW             reduce using rule 92 (V -> CADENA .)
    PARENTIZQ       reduce using rule 92 (V -> CADENA .)
    NEGLOGICA       reduce using rule 92 (V -> CADENA .)
    NUMERO          reduce using rule 92 (V -> CADENA .)
    CADENA          reduce using rule 92 (V -> CADENA .)
    TRUE            reduce using rule 92 (V -> CADENA .)
    FALSE           reduce using rule 92 (V -> CADENA .)
    NULL            reduce using rule 92 (V -> CADENA .)
    LLAVEDER        reduce using rule 92 (V -> CADENA .)
    ELSE            reduce using rule 92 (V -> CADENA .)
    PARENTDER       reduce using rule 92 (V -> CADENA .)
    CORCHDER        reduce using rule 92 (V -> CADENA .)
    FINALIZADOR     reduce using rule 92 (V -> CADENA .)
    COMA            reduce using rule 92 (V -> CADENA .)


state 75

    (93) V -> TRUE .

    CORCHIZQ        reduce using rule 93 (V -> TRUE .)
    ACCESO          reduce using rule 93 (V -> TRUE .)
    MODULO          reduce using rule 93 (V -> TRUE .)
    YAND            reduce using rule 93 (V -> TRUE .)
    OOR             reduce using rule 93 (V -> TRUE .)
    MENORQUE        reduce using rule 93 (V -> TRUE .)
    MENORIGUAL      reduce using rule 93 (V -> TRUE .)
    MAYORQUE        reduce using rule 93 (V -> TRUE .)
    MAYORIGUAL      reduce using rule 93 (V -> TRUE .)
    COMPIGUAL       reduce using rule 93 (V -> TRUE .)
    COMPDIFERENTE   reduce using rule 93 (V -> TRUE .)
    PLUS            reduce using rule 93 (V -> TRUE .)
    MINUS           reduce using rule 93 (V -> TRUE .)
    POR             reduce using rule 93 (V -> TRUE .)
    DIVIDE          reduce using rule 93 (V -> TRUE .)
    RETURN          reduce using rule 93 (V -> TRUE .)
    IF              reduce using rule 93 (V -> TRUE .)
    WHILE           reduce using rule 93 (V -> TRUE .)
    BREAK           reduce using rule 93 (V -> TRUE .)
    CONTINUE        reduce using rule 93 (V -> TRUE .)
    LLAVEIZQ        reduce using rule 93 (V -> TRUE .)
    ID              reduce using rule 93 (V -> TRUE .)
    THIS            reduce using rule 93 (V -> TRUE .)
    NEW             reduce using rule 93 (V -> TRUE .)
    PARENTIZQ       reduce using rule 93 (V -> TRUE .)
    NEGLOGICA       reduce using rule 93 (V -> TRUE .)
    NUMERO          reduce using rule 93 (V -> TRUE .)
    CADENA          reduce using rule 93 (V -> TRUE .)
    TRUE            reduce using rule 93 (V -> TRUE .)
    FALSE           reduce using rule 93 (V -> TRUE .)
    NULL            reduce using rule 93 (V -> TRUE .)
    LLAVEDER        reduce using rule 93 (V -> TRUE .)
    ELSE            reduce using rule 93 (V -> TRUE .)
    PARENTDER       reduce using rule 93 (V -> TRUE .)
    CORCHDER        reduce using rule 93 (V -> TRUE .)
    FINALIZADOR     reduce using rule 93 (V -> TRUE .)
    COMA            reduce using rule 93 (V -> TRUE .)


state 76

    (94) V -> FALSE .

    CORCHIZQ        reduce using rule 94 (V -> FALSE .)
    ACCESO          reduce using rule 94 (V -> FALSE .)
    MODULO          reduce using rule 94 (V -> FALSE .)
    YAND            reduce using rule 94 (V -> FALSE .)
    OOR             reduce using rule 94 (V -> FALSE .)
    MENORQUE        reduce using rule 94 (V -> FALSE .)
    MENORIGUAL      reduce using rule 94 (V -> FALSE .)
    MAYORQUE        reduce using rule 94 (V -> FALSE .)
    MAYORIGUAL      reduce using rule 94 (V -> FALSE .)
    COMPIGUAL       reduce using rule 94 (V -> FALSE .)
    COMPDIFERENTE   reduce using rule 94 (V -> FALSE .)
    PLUS            reduce using rule 94 (V -> FALSE .)
    MINUS           reduce using rule 94 (V -> FALSE .)
    POR             reduce using rule 94 (V -> FALSE .)
    DIVIDE          reduce using rule 94 (V -> FALSE .)
    RETURN          reduce using rule 94 (V -> FALSE .)
    IF              reduce using rule 94 (V -> FALSE .)
    WHILE           reduce using rule 94 (V -> FALSE .)
    BREAK           reduce using rule 94 (V -> FALSE .)
    CONTINUE        reduce using rule 94 (V -> FALSE .)
    LLAVEIZQ        reduce using rule 94 (V -> FALSE .)
    ID              reduce using rule 94 (V -> FALSE .)
    THIS            reduce using rule 94 (V -> FALSE .)
    NEW             reduce using rule 94 (V -> FALSE .)
    PARENTIZQ       reduce using rule 94 (V -> FALSE .)
    NEGLOGICA       reduce using rule 94 (V -> FALSE .)
    NUMERO          reduce using rule 94 (V -> FALSE .)
    CADENA          reduce using rule 94 (V -> FALSE .)
    TRUE            reduce using rule 94 (V -> FALSE .)
    FALSE           reduce using rule 94 (V -> FALSE .)
    NULL            reduce using rule 94 (V -> FALSE .)
    LLAVEDER        reduce using rule 94 (V -> FALSE .)
    ELSE            reduce using rule 94 (V -> FALSE .)
    PARENTDER       reduce using rule 94 (V -> FALSE .)
    CORCHDER        reduce using rule 94 (V -> FALSE .)
    FINALIZADOR     reduce using rule 94 (V -> FALSE .)
    COMA            reduce using rule 94 (V -> FALSE .)


state 77

    (95) V -> NULL .

    CORCHIZQ        reduce using rule 95 (V -> NULL .)
    ACCESO          reduce using rule 95 (V -> NULL .)
    MODULO          reduce using rule 95 (V -> NULL .)
    YAND            reduce using rule 95 (V -> NULL .)
    OOR             reduce using rule 95 (V -> NULL .)
    MENORQUE        reduce using rule 95 (V -> NULL .)
    MENORIGUAL      reduce using rule 95 (V -> NULL .)
    MAYORQUE        reduce using rule 95 (V -> NULL .)
    MAYORIGUAL      reduce using rule 95 (V -> NULL .)
    COMPIGUAL       reduce using rule 95 (V -> NULL .)
    COMPDIFERENTE   reduce using rule 95 (V -> NULL .)
    PLUS            reduce using rule 95 (V -> NULL .)
    MINUS           reduce using rule 95 (V -> NULL .)
    POR             reduce using rule 95 (V -> NULL .)
    DIVIDE          reduce using rule 95 (V -> NULL .)
    RETURN          reduce using rule 95 (V -> NULL .)
    IF              reduce using rule 95 (V -> NULL .)
    WHILE           reduce using rule 95 (V -> NULL .)
    BREAK           reduce using rule 95 (V -> NULL .)
    CONTINUE        reduce using rule 95 (V -> NULL .)
    LLAVEIZQ        reduce using rule 95 (V -> NULL .)
    ID              reduce using rule 95 (V -> NULL .)
    THIS            reduce using rule 95 (V -> NULL .)
    NEW             reduce using rule 95 (V -> NULL .)
    PARENTIZQ       reduce using rule 95 (V -> NULL .)
    NEGLOGICA       reduce using rule 95 (V -> NULL .)
    NUMERO          reduce using rule 95 (V -> NULL .)
    CADENA          reduce using rule 95 (V -> NULL .)
    TRUE            reduce using rule 95 (V -> NULL .)
    FALSE           reduce using rule 95 (V -> NULL .)
    NULL            reduce using rule 95 (V -> NULL .)
    LLAVEDER        reduce using rule 95 (V -> NULL .)
    ELSE            reduce using rule 95 (V -> NULL .)
    PARENTDER       reduce using rule 95 (V -> NULL .)
    CORCHDER        reduce using rule 95 (V -> NULL .)
    FINALIZADOR     reduce using rule 95 (V -> NULL .)
    COMA            reduce using rule 95 (V -> NULL .)


state 78

    (28) H -> vardecl H .

    RETURN          reduce using rule 28 (H -> vardecl H .)
    IF              reduce using rule 28 (H -> vardecl H .)
    WHILE           reduce using rule 28 (H -> vardecl H .)
    BREAK           reduce using rule 28 (H -> vardecl H .)
    CONTINUE        reduce using rule 28 (H -> vardecl H .)
    LLAVEIZQ        reduce using rule 28 (H -> vardecl H .)
    ID              reduce using rule 28 (H -> vardecl H .)
    THIS            reduce using rule 28 (H -> vardecl H .)
    NEW             reduce using rule 28 (H -> vardecl H .)
    PARENTIZQ       reduce using rule 28 (H -> vardecl H .)
    NEGLOGICA       reduce using rule 28 (H -> vardecl H .)
    NUMERO          reduce using rule 28 (H -> vardecl H .)
    CADENA          reduce using rule 28 (H -> vardecl H .)
    TRUE            reduce using rule 28 (H -> vardecl H .)
    FALSE           reduce using rule 28 (H -> vardecl H .)
    NULL            reduce using rule 28 (H -> vardecl H .)
    LLAVEDER        reduce using rule 28 (H -> vardecl H .)


state 79

    (32) vardecl -> TYPE ID . J L FINALIZADOR
    (33) J -> . ASIGNAR expr
    (34) J -> .

    ASIGNAR         shift and go to state 118
    COMA            reduce using rule 34 (J -> .)
    FINALIZADOR     reduce using rule 34 (J -> .)

    J                              shift and go to state 117

state 80

    (19) F -> COMA TYPE ID . F
    (19) F -> . COMA TYPE ID F
    (20) F -> .

    COMA            shift and go to state 43
    PARENTDER       reduce using rule 20 (F -> .)

    F                              shift and go to state 119

state 81

    (27) block -> LLAVEIZQ H I LLAVEDER .

    VOID            reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    INT             reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    BOOLEAN         reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    STRING          reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    ID              reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    LLAVEDER        reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    RETURN          reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    IF              reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    WHILE           reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    BREAK           reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    CONTINUE        reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    LLAVEIZQ        reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    THIS            reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    NEW             reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    PARENTIZQ       reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    NEGLOGICA       reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    NUMERO          reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    CADENA          reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    TRUE            reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    FALSE           reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    NULL            reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)
    ELSE            reduce using rule 27 (block -> LLAVEIZQ H I LLAVEDER .)


state 82

    (30) I -> stmt I .

    LLAVEDER        reduce using rule 30 (I -> stmt I .)


state 83

    (39) M -> assign FINALIZADOR .

    RETURN          reduce using rule 39 (M -> assign FINALIZADOR .)
    IF              reduce using rule 39 (M -> assign FINALIZADOR .)
    WHILE           reduce using rule 39 (M -> assign FINALIZADOR .)
    BREAK           reduce using rule 39 (M -> assign FINALIZADOR .)
    CONTINUE        reduce using rule 39 (M -> assign FINALIZADOR .)
    LLAVEIZQ        reduce using rule 39 (M -> assign FINALIZADOR .)
    ID              reduce using rule 39 (M -> assign FINALIZADOR .)
    THIS            reduce using rule 39 (M -> assign FINALIZADOR .)
    NEW             reduce using rule 39 (M -> assign FINALIZADOR .)
    PARENTIZQ       reduce using rule 39 (M -> assign FINALIZADOR .)
    NEGLOGICA       reduce using rule 39 (M -> assign FINALIZADOR .)
    NUMERO          reduce using rule 39 (M -> assign FINALIZADOR .)
    CADENA          reduce using rule 39 (M -> assign FINALIZADOR .)
    TRUE            reduce using rule 39 (M -> assign FINALIZADOR .)
    FALSE           reduce using rule 39 (M -> assign FINALIZADOR .)
    NULL            reduce using rule 39 (M -> assign FINALIZADOR .)
    LLAVEDER        reduce using rule 39 (M -> assign FINALIZADOR .)
    ELSE            reduce using rule 39 (M -> assign FINALIZADOR .)


state 84

    (40) M -> call FINALIZADOR .

    RETURN          reduce using rule 40 (M -> call FINALIZADOR .)
    IF              reduce using rule 40 (M -> call FINALIZADOR .)
    WHILE           reduce using rule 40 (M -> call FINALIZADOR .)
    BREAK           reduce using rule 40 (M -> call FINALIZADOR .)
    CONTINUE        reduce using rule 40 (M -> call FINALIZADOR .)
    LLAVEIZQ        reduce using rule 40 (M -> call FINALIZADOR .)
    ID              reduce using rule 40 (M -> call FINALIZADOR .)
    THIS            reduce using rule 40 (M -> call FINALIZADOR .)
    NEW             reduce using rule 40 (M -> call FINALIZADOR .)
    PARENTIZQ       reduce using rule 40 (M -> call FINALIZADOR .)
    NEGLOGICA       reduce using rule 40 (M -> call FINALIZADOR .)
    NUMERO          reduce using rule 40 (M -> call FINALIZADOR .)
    CADENA          reduce using rule 40 (M -> call FINALIZADOR .)
    TRUE            reduce using rule 40 (M -> call FINALIZADOR .)
    FALSE           reduce using rule 40 (M -> call FINALIZADOR .)
    NULL            reduce using rule 40 (M -> call FINALIZADOR .)
    LLAVEDER        reduce using rule 40 (M -> call FINALIZADOR .)
    ELSE            reduce using rule 40 (M -> call FINALIZADOR .)


state 85

    (41) M -> RETURN N .

    RETURN          reduce using rule 41 (M -> RETURN N .)
    IF              reduce using rule 41 (M -> RETURN N .)
    WHILE           reduce using rule 41 (M -> RETURN N .)
    BREAK           reduce using rule 41 (M -> RETURN N .)
    CONTINUE        reduce using rule 41 (M -> RETURN N .)
    LLAVEIZQ        reduce using rule 41 (M -> RETURN N .)
    ID              reduce using rule 41 (M -> RETURN N .)
    THIS            reduce using rule 41 (M -> RETURN N .)
    NEW             reduce using rule 41 (M -> RETURN N .)
    PARENTIZQ       reduce using rule 41 (M -> RETURN N .)
    NEGLOGICA       reduce using rule 41 (M -> RETURN N .)
    NUMERO          reduce using rule 41 (M -> RETURN N .)
    CADENA          reduce using rule 41 (M -> RETURN N .)
    TRUE            reduce using rule 41 (M -> RETURN N .)
    FALSE           reduce using rule 41 (M -> RETURN N .)
    NULL            reduce using rule 41 (M -> RETURN N .)
    LLAVEDER        reduce using rule 41 (M -> RETURN N .)
    ELSE            reduce using rule 41 (M -> RETURN N .)


state 86

    (47) N -> expr .
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

    RETURN          reduce using rule 47 (N -> expr .)
    IF              reduce using rule 47 (N -> expr .)
    WHILE           reduce using rule 47 (N -> expr .)
    BREAK           reduce using rule 47 (N -> expr .)
    CONTINUE        reduce using rule 47 (N -> expr .)
    LLAVEIZQ        reduce using rule 47 (N -> expr .)
    ID              reduce using rule 47 (N -> expr .)
    THIS            reduce using rule 47 (N -> expr .)
    NEW             reduce using rule 47 (N -> expr .)
    PARENTIZQ       reduce using rule 47 (N -> expr .)
    NEGLOGICA       reduce using rule 47 (N -> expr .)
    NUMERO          reduce using rule 47 (N -> expr .)
    CADENA          reduce using rule 47 (N -> expr .)
    TRUE            reduce using rule 47 (N -> expr .)
    FALSE           reduce using rule 47 (N -> expr .)
    NULL            reduce using rule 47 (N -> expr .)
    LLAVEDER        reduce using rule 47 (N -> expr .)
    ELSE            reduce using rule 47 (N -> expr .)
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 87

    (65) T -> location .

    ACCESO          reduce using rule 65 (T -> location .)
    CORCHIZQ        reduce using rule 65 (T -> location .)
    MODULO          reduce using rule 65 (T -> location .)
    YAND            reduce using rule 65 (T -> location .)
    OOR             reduce using rule 65 (T -> location .)
    MENORQUE        reduce using rule 65 (T -> location .)
    MENORIGUAL      reduce using rule 65 (T -> location .)
    MAYORQUE        reduce using rule 65 (T -> location .)
    MAYORIGUAL      reduce using rule 65 (T -> location .)
    COMPIGUAL       reduce using rule 65 (T -> location .)
    COMPDIFERENTE   reduce using rule 65 (T -> location .)
    PLUS            reduce using rule 65 (T -> location .)
    MINUS           reduce using rule 65 (T -> location .)
    POR             reduce using rule 65 (T -> location .)
    DIVIDE          reduce using rule 65 (T -> location .)
    RETURN          reduce using rule 65 (T -> location .)
    IF              reduce using rule 65 (T -> location .)
    WHILE           reduce using rule 65 (T -> location .)
    BREAK           reduce using rule 65 (T -> location .)
    CONTINUE        reduce using rule 65 (T -> location .)
    LLAVEIZQ        reduce using rule 65 (T -> location .)
    ID              reduce using rule 65 (T -> location .)
    THIS            reduce using rule 65 (T -> location .)
    NEW             reduce using rule 65 (T -> location .)
    PARENTIZQ       reduce using rule 65 (T -> location .)
    NEGLOGICA       reduce using rule 65 (T -> location .)
    NUMERO          reduce using rule 65 (T -> location .)
    CADENA          reduce using rule 65 (T -> location .)
    TRUE            reduce using rule 65 (T -> location .)
    FALSE           reduce using rule 65 (T -> location .)
    NULL            reduce using rule 65 (T -> location .)
    LLAVEDER        reduce using rule 65 (T -> location .)
    ELSE            reduce using rule 65 (T -> location .)
    PARENTDER       reduce using rule 65 (T -> location .)
    CORCHDER        reduce using rule 65 (T -> location .)
    FINALIZADOR     reduce using rule 65 (T -> location .)
    COMA            reduce using rule 65 (T -> location .)


state 88

    (66) T -> call .

    ACCESO          reduce using rule 66 (T -> call .)
    CORCHIZQ        reduce using rule 66 (T -> call .)
    MODULO          reduce using rule 66 (T -> call .)
    YAND            reduce using rule 66 (T -> call .)
    OOR             reduce using rule 66 (T -> call .)
    MENORQUE        reduce using rule 66 (T -> call .)
    MENORIGUAL      reduce using rule 66 (T -> call .)
    MAYORQUE        reduce using rule 66 (T -> call .)
    MAYORIGUAL      reduce using rule 66 (T -> call .)
    COMPIGUAL       reduce using rule 66 (T -> call .)
    COMPDIFERENTE   reduce using rule 66 (T -> call .)
    PLUS            reduce using rule 66 (T -> call .)
    MINUS           reduce using rule 66 (T -> call .)
    POR             reduce using rule 66 (T -> call .)
    DIVIDE          reduce using rule 66 (T -> call .)
    RETURN          reduce using rule 66 (T -> call .)
    IF              reduce using rule 66 (T -> call .)
    WHILE           reduce using rule 66 (T -> call .)
    BREAK           reduce using rule 66 (T -> call .)
    CONTINUE        reduce using rule 66 (T -> call .)
    LLAVEIZQ        reduce using rule 66 (T -> call .)
    ID              reduce using rule 66 (T -> call .)
    THIS            reduce using rule 66 (T -> call .)
    NEW             reduce using rule 66 (T -> call .)
    PARENTIZQ       reduce using rule 66 (T -> call .)
    NEGLOGICA       reduce using rule 66 (T -> call .)
    NUMERO          reduce using rule 66 (T -> call .)
    CADENA          reduce using rule 66 (T -> call .)
    TRUE            reduce using rule 66 (T -> call .)
    FALSE           reduce using rule 66 (T -> call .)
    NULL            reduce using rule 66 (T -> call .)
    LLAVEDER        reduce using rule 66 (T -> call .)
    ELSE            reduce using rule 66 (T -> call .)
    PARENTDER       reduce using rule 66 (T -> call .)
    CORCHDER        reduce using rule 66 (T -> call .)
    FINALIZADOR     reduce using rule 66 (T -> call .)
    COMA            reduce using rule 66 (T -> call .)


state 89

    (52) location -> method .
    (58) call -> method . PARENTIZQ Q PARENTDER

  ! shift/reduce conflict for PARENTIZQ resolved as shift
    ACCESO          reduce using rule 52 (location -> method .)
    CORCHIZQ        reduce using rule 52 (location -> method .)
    MODULO          reduce using rule 52 (location -> method .)
    YAND            reduce using rule 52 (location -> method .)
    OOR             reduce using rule 52 (location -> method .)
    MENORQUE        reduce using rule 52 (location -> method .)
    MENORIGUAL      reduce using rule 52 (location -> method .)
    MAYORQUE        reduce using rule 52 (location -> method .)
    MAYORIGUAL      reduce using rule 52 (location -> method .)
    COMPIGUAL       reduce using rule 52 (location -> method .)
    COMPDIFERENTE   reduce using rule 52 (location -> method .)
    PLUS            reduce using rule 52 (location -> method .)
    MINUS           reduce using rule 52 (location -> method .)
    POR             reduce using rule 52 (location -> method .)
    DIVIDE          reduce using rule 52 (location -> method .)
    RETURN          reduce using rule 52 (location -> method .)
    IF              reduce using rule 52 (location -> method .)
    WHILE           reduce using rule 52 (location -> method .)
    BREAK           reduce using rule 52 (location -> method .)
    CONTINUE        reduce using rule 52 (location -> method .)
    LLAVEIZQ        reduce using rule 52 (location -> method .)
    ID              reduce using rule 52 (location -> method .)
    THIS            reduce using rule 52 (location -> method .)
    NEW             reduce using rule 52 (location -> method .)
    NEGLOGICA       reduce using rule 52 (location -> method .)
    NUMERO          reduce using rule 52 (location -> method .)
    CADENA          reduce using rule 52 (location -> method .)
    TRUE            reduce using rule 52 (location -> method .)
    FALSE           reduce using rule 52 (location -> method .)
    NULL            reduce using rule 52 (location -> method .)
    LLAVEDER        reduce using rule 52 (location -> method .)
    ELSE            reduce using rule 52 (location -> method .)
    PARENTDER       reduce using rule 52 (location -> method .)
    CORCHDER        reduce using rule 52 (location -> method .)
    FINALIZADOR     reduce using rule 52 (location -> method .)
    COMA            reduce using rule 52 (location -> method .)
    PARENTIZQ       shift and go to state 113

  ! PARENTIZQ       [ reduce using rule 52 (location -> method .) ]


state 90

    (42) M -> IF PARENTIZQ . expr PARENTDER stmt O
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    expr                           shift and go to state 121
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 91

    (74) T -> PARENTIZQ expr . PARENTDER
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

    PARENTDER       shift and go to state 122
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 92

    (57) Pprima -> expr CORCHIZQ . expr CORCHDER
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    expr                           shift and go to state 123
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 93

    (56) P -> expr ACCESO . ID
    (70) T -> expr ACCESO . LENGTH

    ID              shift and go to state 124
    LENGTH          shift and go to state 125


state 94

    (71) T -> expr binary . expr
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    expr                           shift and go to state 126
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 95

    (75) binary -> U .

    THIS            reduce using rule 75 (binary -> U .)
    NEW             reduce using rule 75 (binary -> U .)
    PARENTIZQ       reduce using rule 75 (binary -> U .)
    NEGLOGICA       reduce using rule 75 (binary -> U .)
    NUMERO          reduce using rule 75 (binary -> U .)
    CADENA          reduce using rule 75 (binary -> U .)
    TRUE            reduce using rule 75 (binary -> U .)
    FALSE           reduce using rule 75 (binary -> U .)
    NULL            reduce using rule 75 (binary -> U .)
    ID              reduce using rule 75 (binary -> U .)


state 96

    (76) U -> MODULO .

    THIS            reduce using rule 76 (U -> MODULO .)
    NEW             reduce using rule 76 (U -> MODULO .)
    PARENTIZQ       reduce using rule 76 (U -> MODULO .)
    NEGLOGICA       reduce using rule 76 (U -> MODULO .)
    NUMERO          reduce using rule 76 (U -> MODULO .)
    CADENA          reduce using rule 76 (U -> MODULO .)
    TRUE            reduce using rule 76 (U -> MODULO .)
    FALSE           reduce using rule 76 (U -> MODULO .)
    NULL            reduce using rule 76 (U -> MODULO .)
    ID              reduce using rule 76 (U -> MODULO .)


state 97

    (77) U -> YAND .

    THIS            reduce using rule 77 (U -> YAND .)
    NEW             reduce using rule 77 (U -> YAND .)
    PARENTIZQ       reduce using rule 77 (U -> YAND .)
    NEGLOGICA       reduce using rule 77 (U -> YAND .)
    NUMERO          reduce using rule 77 (U -> YAND .)
    CADENA          reduce using rule 77 (U -> YAND .)
    TRUE            reduce using rule 77 (U -> YAND .)
    FALSE           reduce using rule 77 (U -> YAND .)
    NULL            reduce using rule 77 (U -> YAND .)
    ID              reduce using rule 77 (U -> YAND .)


state 98

    (78) U -> OOR .

    THIS            reduce using rule 78 (U -> OOR .)
    NEW             reduce using rule 78 (U -> OOR .)
    PARENTIZQ       reduce using rule 78 (U -> OOR .)
    NEGLOGICA       reduce using rule 78 (U -> OOR .)
    NUMERO          reduce using rule 78 (U -> OOR .)
    CADENA          reduce using rule 78 (U -> OOR .)
    TRUE            reduce using rule 78 (U -> OOR .)
    FALSE           reduce using rule 78 (U -> OOR .)
    NULL            reduce using rule 78 (U -> OOR .)
    ID              reduce using rule 78 (U -> OOR .)


state 99

    (79) U -> MENORQUE .

    THIS            reduce using rule 79 (U -> MENORQUE .)
    NEW             reduce using rule 79 (U -> MENORQUE .)
    PARENTIZQ       reduce using rule 79 (U -> MENORQUE .)
    NEGLOGICA       reduce using rule 79 (U -> MENORQUE .)
    NUMERO          reduce using rule 79 (U -> MENORQUE .)
    CADENA          reduce using rule 79 (U -> MENORQUE .)
    TRUE            reduce using rule 79 (U -> MENORQUE .)
    FALSE           reduce using rule 79 (U -> MENORQUE .)
    NULL            reduce using rule 79 (U -> MENORQUE .)
    ID              reduce using rule 79 (U -> MENORQUE .)


state 100

    (80) U -> MENORIGUAL .

    THIS            reduce using rule 80 (U -> MENORIGUAL .)
    NEW             reduce using rule 80 (U -> MENORIGUAL .)
    PARENTIZQ       reduce using rule 80 (U -> MENORIGUAL .)
    NEGLOGICA       reduce using rule 80 (U -> MENORIGUAL .)
    NUMERO          reduce using rule 80 (U -> MENORIGUAL .)
    CADENA          reduce using rule 80 (U -> MENORIGUAL .)
    TRUE            reduce using rule 80 (U -> MENORIGUAL .)
    FALSE           reduce using rule 80 (U -> MENORIGUAL .)
    NULL            reduce using rule 80 (U -> MENORIGUAL .)
    ID              reduce using rule 80 (U -> MENORIGUAL .)


state 101

    (81) U -> MAYORQUE .

    THIS            reduce using rule 81 (U -> MAYORQUE .)
    NEW             reduce using rule 81 (U -> MAYORQUE .)
    PARENTIZQ       reduce using rule 81 (U -> MAYORQUE .)
    NEGLOGICA       reduce using rule 81 (U -> MAYORQUE .)
    NUMERO          reduce using rule 81 (U -> MAYORQUE .)
    CADENA          reduce using rule 81 (U -> MAYORQUE .)
    TRUE            reduce using rule 81 (U -> MAYORQUE .)
    FALSE           reduce using rule 81 (U -> MAYORQUE .)
    NULL            reduce using rule 81 (U -> MAYORQUE .)
    ID              reduce using rule 81 (U -> MAYORQUE .)


state 102

    (82) U -> MAYORIGUAL .

    THIS            reduce using rule 82 (U -> MAYORIGUAL .)
    NEW             reduce using rule 82 (U -> MAYORIGUAL .)
    PARENTIZQ       reduce using rule 82 (U -> MAYORIGUAL .)
    NEGLOGICA       reduce using rule 82 (U -> MAYORIGUAL .)
    NUMERO          reduce using rule 82 (U -> MAYORIGUAL .)
    CADENA          reduce using rule 82 (U -> MAYORIGUAL .)
    TRUE            reduce using rule 82 (U -> MAYORIGUAL .)
    FALSE           reduce using rule 82 (U -> MAYORIGUAL .)
    NULL            reduce using rule 82 (U -> MAYORIGUAL .)
    ID              reduce using rule 82 (U -> MAYORIGUAL .)


state 103

    (83) U -> COMPIGUAL .

    THIS            reduce using rule 83 (U -> COMPIGUAL .)
    NEW             reduce using rule 83 (U -> COMPIGUAL .)
    PARENTIZQ       reduce using rule 83 (U -> COMPIGUAL .)
    NEGLOGICA       reduce using rule 83 (U -> COMPIGUAL .)
    NUMERO          reduce using rule 83 (U -> COMPIGUAL .)
    CADENA          reduce using rule 83 (U -> COMPIGUAL .)
    TRUE            reduce using rule 83 (U -> COMPIGUAL .)
    FALSE           reduce using rule 83 (U -> COMPIGUAL .)
    NULL            reduce using rule 83 (U -> COMPIGUAL .)
    ID              reduce using rule 83 (U -> COMPIGUAL .)


state 104

    (84) U -> COMPDIFERENTE .

    THIS            reduce using rule 84 (U -> COMPDIFERENTE .)
    NEW             reduce using rule 84 (U -> COMPDIFERENTE .)
    PARENTIZQ       reduce using rule 84 (U -> COMPDIFERENTE .)
    NEGLOGICA       reduce using rule 84 (U -> COMPDIFERENTE .)
    NUMERO          reduce using rule 84 (U -> COMPDIFERENTE .)
    CADENA          reduce using rule 84 (U -> COMPDIFERENTE .)
    TRUE            reduce using rule 84 (U -> COMPDIFERENTE .)
    FALSE           reduce using rule 84 (U -> COMPDIFERENTE .)
    NULL            reduce using rule 84 (U -> COMPDIFERENTE .)
    ID              reduce using rule 84 (U -> COMPDIFERENTE .)


state 105

    (85) U -> PLUS .

    THIS            reduce using rule 85 (U -> PLUS .)
    NEW             reduce using rule 85 (U -> PLUS .)
    PARENTIZQ       reduce using rule 85 (U -> PLUS .)
    NEGLOGICA       reduce using rule 85 (U -> PLUS .)
    NUMERO          reduce using rule 85 (U -> PLUS .)
    CADENA          reduce using rule 85 (U -> PLUS .)
    TRUE            reduce using rule 85 (U -> PLUS .)
    FALSE           reduce using rule 85 (U -> PLUS .)
    NULL            reduce using rule 85 (U -> PLUS .)
    ID              reduce using rule 85 (U -> PLUS .)


state 106

    (86) U -> MINUS .

    THIS            reduce using rule 86 (U -> MINUS .)
    NEW             reduce using rule 86 (U -> MINUS .)
    PARENTIZQ       reduce using rule 86 (U -> MINUS .)
    NEGLOGICA       reduce using rule 86 (U -> MINUS .)
    NUMERO          reduce using rule 86 (U -> MINUS .)
    CADENA          reduce using rule 86 (U -> MINUS .)
    TRUE            reduce using rule 86 (U -> MINUS .)
    FALSE           reduce using rule 86 (U -> MINUS .)
    NULL            reduce using rule 86 (U -> MINUS .)
    ID              reduce using rule 86 (U -> MINUS .)


state 107

    (87) U -> POR .

    THIS            reduce using rule 87 (U -> POR .)
    NEW             reduce using rule 87 (U -> POR .)
    PARENTIZQ       reduce using rule 87 (U -> POR .)
    NEGLOGICA       reduce using rule 87 (U -> POR .)
    NUMERO          reduce using rule 87 (U -> POR .)
    CADENA          reduce using rule 87 (U -> POR .)
    TRUE            reduce using rule 87 (U -> POR .)
    FALSE           reduce using rule 87 (U -> POR .)
    NULL            reduce using rule 87 (U -> POR .)
    ID              reduce using rule 87 (U -> POR .)


state 108

    (88) U -> DIVIDE .

    THIS            reduce using rule 88 (U -> DIVIDE .)
    NEW             reduce using rule 88 (U -> DIVIDE .)
    PARENTIZQ       reduce using rule 88 (U -> DIVIDE .)
    NEGLOGICA       reduce using rule 88 (U -> DIVIDE .)
    NUMERO          reduce using rule 88 (U -> DIVIDE .)
    CADENA          reduce using rule 88 (U -> DIVIDE .)
    TRUE            reduce using rule 88 (U -> DIVIDE .)
    FALSE           reduce using rule 88 (U -> DIVIDE .)
    NULL            reduce using rule 88 (U -> DIVIDE .)
    ID              reduce using rule 88 (U -> DIVIDE .)


state 109

    (43) M -> WHILE PARENTIZQ . expr PARENTDER stmt
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    expr                           shift and go to state 127
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 110

    (44) M -> BREAK FINALIZADOR .

    RETURN          reduce using rule 44 (M -> BREAK FINALIZADOR .)
    IF              reduce using rule 44 (M -> BREAK FINALIZADOR .)
    WHILE           reduce using rule 44 (M -> BREAK FINALIZADOR .)
    BREAK           reduce using rule 44 (M -> BREAK FINALIZADOR .)
    CONTINUE        reduce using rule 44 (M -> BREAK FINALIZADOR .)
    LLAVEIZQ        reduce using rule 44 (M -> BREAK FINALIZADOR .)
    ID              reduce using rule 44 (M -> BREAK FINALIZADOR .)
    THIS            reduce using rule 44 (M -> BREAK FINALIZADOR .)
    NEW             reduce using rule 44 (M -> BREAK FINALIZADOR .)
    PARENTIZQ       reduce using rule 44 (M -> BREAK FINALIZADOR .)
    NEGLOGICA       reduce using rule 44 (M -> BREAK FINALIZADOR .)
    NUMERO          reduce using rule 44 (M -> BREAK FINALIZADOR .)
    CADENA          reduce using rule 44 (M -> BREAK FINALIZADOR .)
    TRUE            reduce using rule 44 (M -> BREAK FINALIZADOR .)
    FALSE           reduce using rule 44 (M -> BREAK FINALIZADOR .)
    NULL            reduce using rule 44 (M -> BREAK FINALIZADOR .)
    LLAVEDER        reduce using rule 44 (M -> BREAK FINALIZADOR .)
    ELSE            reduce using rule 44 (M -> BREAK FINALIZADOR .)


state 111

    (45) M -> CONTINUE FINALIZADOR .

    RETURN          reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    IF              reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    WHILE           reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    BREAK           reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    CONTINUE        reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    LLAVEIZQ        reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    ID              reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    THIS            reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    NEW             reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    PARENTIZQ       reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    NEGLOGICA       reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    NUMERO          reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    CADENA          reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    TRUE            reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    FALSE           reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    NULL            reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    LLAVEDER        reduce using rule 45 (M -> CONTINUE FINALIZADOR .)
    ELSE            reduce using rule 45 (M -> CONTINUE FINALIZADOR .)


state 112

    (51) assign -> location ASIGNAR . expr
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    location                       shift and go to state 87
    expr                           shift and go to state 128
    T                              shift and go to state 66
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 113

    (58) call -> method PARENTIZQ . Q PARENTDER
    (59) Q -> . actuals
    (60) Q -> .
    (61) actuals -> . expr S
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    PARENTDER       reduce using rule 60 (Q -> .)
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    method                         shift and go to state 89
    Q                              shift and go to state 129
    actuals                        shift and go to state 130
    expr                           shift and go to state 131
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 114

    (68) T -> NEW ID . PARENTIZQ PARENTDER
    (25) G -> ID .

    PARENTIZQ       shift and go to state 132
    CORCHIZQ        reduce using rule 25 (G -> ID .)


state 115

    (69) T -> NEW TYPE . CORCHIZQ expr CORCHDER
    (26) G -> TYPE . CORCHIZQ CORCHDER

    CORCHIZQ        shift and go to state 133


state 116

    (72) T -> unary expr .
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

  ! shift/reduce conflict for ACCESO resolved as shift
  ! shift/reduce conflict for CORCHIZQ resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for YAND resolved as shift
  ! shift/reduce conflict for OOR resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MAYORIGUAL resolved as shift
  ! shift/reduce conflict for COMPIGUAL resolved as shift
  ! shift/reduce conflict for COMPDIFERENTE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    RETURN          reduce using rule 72 (T -> unary expr .)
    IF              reduce using rule 72 (T -> unary expr .)
    WHILE           reduce using rule 72 (T -> unary expr .)
    BREAK           reduce using rule 72 (T -> unary expr .)
    CONTINUE        reduce using rule 72 (T -> unary expr .)
    LLAVEIZQ        reduce using rule 72 (T -> unary expr .)
    ID              reduce using rule 72 (T -> unary expr .)
    THIS            reduce using rule 72 (T -> unary expr .)
    NEW             reduce using rule 72 (T -> unary expr .)
    PARENTIZQ       reduce using rule 72 (T -> unary expr .)
    NEGLOGICA       reduce using rule 72 (T -> unary expr .)
    NUMERO          reduce using rule 72 (T -> unary expr .)
    CADENA          reduce using rule 72 (T -> unary expr .)
    TRUE            reduce using rule 72 (T -> unary expr .)
    FALSE           reduce using rule 72 (T -> unary expr .)
    NULL            reduce using rule 72 (T -> unary expr .)
    LLAVEDER        reduce using rule 72 (T -> unary expr .)
    ELSE            reduce using rule 72 (T -> unary expr .)
    PARENTDER       reduce using rule 72 (T -> unary expr .)
    CORCHDER        reduce using rule 72 (T -> unary expr .)
    FINALIZADOR     reduce using rule 72 (T -> unary expr .)
    COMA            reduce using rule 72 (T -> unary expr .)
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

  ! CORCHIZQ        [ reduce using rule 72 (T -> unary expr .) ]
  ! ACCESO          [ reduce using rule 72 (T -> unary expr .) ]
  ! MODULO          [ reduce using rule 72 (T -> unary expr .) ]
  ! YAND            [ reduce using rule 72 (T -> unary expr .) ]
  ! OOR             [ reduce using rule 72 (T -> unary expr .) ]
  ! MENORQUE        [ reduce using rule 72 (T -> unary expr .) ]
  ! MENORIGUAL      [ reduce using rule 72 (T -> unary expr .) ]
  ! MAYORQUE        [ reduce using rule 72 (T -> unary expr .) ]
  ! MAYORIGUAL      [ reduce using rule 72 (T -> unary expr .) ]
  ! COMPIGUAL       [ reduce using rule 72 (T -> unary expr .) ]
  ! COMPDIFERENTE   [ reduce using rule 72 (T -> unary expr .) ]
  ! PLUS            [ reduce using rule 72 (T -> unary expr .) ]
  ! MINUS           [ reduce using rule 72 (T -> unary expr .) ]
  ! POR             [ reduce using rule 72 (T -> unary expr .) ]
  ! DIVIDE          [ reduce using rule 72 (T -> unary expr .) ]

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 117

    (32) vardecl -> TYPE ID J . L FINALIZADOR
    (36) L -> . K L
    (37) L -> .
    (35) K -> . COMA ID J

    FINALIZADOR     reduce using rule 37 (L -> .)
    COMA            shift and go to state 136

    L                              shift and go to state 134
    K                              shift and go to state 135

state 118

    (33) J -> ASIGNAR . expr
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    expr                           shift and go to state 137
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 119

    (19) F -> COMA TYPE ID F .

    PARENTDER       reduce using rule 19 (F -> COMA TYPE ID F .)


state 120

    (70) T -> expr ACCESO . LENGTH
    (56) P -> expr ACCESO . ID

    LENGTH          shift and go to state 125
    ID              shift and go to state 124


state 121

    (42) M -> IF PARENTIZQ expr . PARENTDER stmt O
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

    PARENTDER       shift and go to state 138
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 122

    (74) T -> PARENTIZQ expr PARENTDER .

    CORCHIZQ        reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    ACCESO          reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    MODULO          reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    YAND            reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    OOR             reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    MENORQUE        reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    MENORIGUAL      reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    MAYORQUE        reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    MAYORIGUAL      reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    COMPIGUAL       reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    COMPDIFERENTE   reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    PLUS            reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    MINUS           reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    POR             reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    DIVIDE          reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    RETURN          reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    IF              reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    WHILE           reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    BREAK           reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    CONTINUE        reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    LLAVEIZQ        reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    ID              reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    THIS            reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    NEW             reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    PARENTIZQ       reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    NEGLOGICA       reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    NUMERO          reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    CADENA          reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    TRUE            reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    FALSE           reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    NULL            reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    LLAVEDER        reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    ELSE            reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    PARENTDER       reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    CORCHDER        reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    FINALIZADOR     reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)
    COMA            reduce using rule 74 (T -> PARENTIZQ expr PARENTDER .)


state 123

    (57) Pprima -> expr CORCHIZQ expr . CORCHDER
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

    CORCHDER        shift and go to state 139
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 124

    (56) P -> expr ACCESO ID .

    PARENTIZQ       reduce using rule 56 (P -> expr ACCESO ID .)
    ASIGNAR         reduce using rule 56 (P -> expr ACCESO ID .)
    CORCHIZQ        reduce using rule 56 (P -> expr ACCESO ID .)
    ACCESO          reduce using rule 56 (P -> expr ACCESO ID .)
    MODULO          reduce using rule 56 (P -> expr ACCESO ID .)
    YAND            reduce using rule 56 (P -> expr ACCESO ID .)
    OOR             reduce using rule 56 (P -> expr ACCESO ID .)
    MENORQUE        reduce using rule 56 (P -> expr ACCESO ID .)
    MENORIGUAL      reduce using rule 56 (P -> expr ACCESO ID .)
    MAYORQUE        reduce using rule 56 (P -> expr ACCESO ID .)
    MAYORIGUAL      reduce using rule 56 (P -> expr ACCESO ID .)
    COMPIGUAL       reduce using rule 56 (P -> expr ACCESO ID .)
    COMPDIFERENTE   reduce using rule 56 (P -> expr ACCESO ID .)
    PLUS            reduce using rule 56 (P -> expr ACCESO ID .)
    MINUS           reduce using rule 56 (P -> expr ACCESO ID .)
    POR             reduce using rule 56 (P -> expr ACCESO ID .)
    DIVIDE          reduce using rule 56 (P -> expr ACCESO ID .)
    RETURN          reduce using rule 56 (P -> expr ACCESO ID .)
    IF              reduce using rule 56 (P -> expr ACCESO ID .)
    WHILE           reduce using rule 56 (P -> expr ACCESO ID .)
    BREAK           reduce using rule 56 (P -> expr ACCESO ID .)
    CONTINUE        reduce using rule 56 (P -> expr ACCESO ID .)
    LLAVEIZQ        reduce using rule 56 (P -> expr ACCESO ID .)
    ID              reduce using rule 56 (P -> expr ACCESO ID .)
    THIS            reduce using rule 56 (P -> expr ACCESO ID .)
    NEW             reduce using rule 56 (P -> expr ACCESO ID .)
    NEGLOGICA       reduce using rule 56 (P -> expr ACCESO ID .)
    NUMERO          reduce using rule 56 (P -> expr ACCESO ID .)
    CADENA          reduce using rule 56 (P -> expr ACCESO ID .)
    TRUE            reduce using rule 56 (P -> expr ACCESO ID .)
    FALSE           reduce using rule 56 (P -> expr ACCESO ID .)
    NULL            reduce using rule 56 (P -> expr ACCESO ID .)
    LLAVEDER        reduce using rule 56 (P -> expr ACCESO ID .)
    ELSE            reduce using rule 56 (P -> expr ACCESO ID .)
    PARENTDER       reduce using rule 56 (P -> expr ACCESO ID .)
    CORCHDER        reduce using rule 56 (P -> expr ACCESO ID .)
    FINALIZADOR     reduce using rule 56 (P -> expr ACCESO ID .)
    COMA            reduce using rule 56 (P -> expr ACCESO ID .)


state 125

    (70) T -> expr ACCESO LENGTH .

    CORCHIZQ        reduce using rule 70 (T -> expr ACCESO LENGTH .)
    ACCESO          reduce using rule 70 (T -> expr ACCESO LENGTH .)
    MODULO          reduce using rule 70 (T -> expr ACCESO LENGTH .)
    YAND            reduce using rule 70 (T -> expr ACCESO LENGTH .)
    OOR             reduce using rule 70 (T -> expr ACCESO LENGTH .)
    MENORQUE        reduce using rule 70 (T -> expr ACCESO LENGTH .)
    MENORIGUAL      reduce using rule 70 (T -> expr ACCESO LENGTH .)
    MAYORQUE        reduce using rule 70 (T -> expr ACCESO LENGTH .)
    MAYORIGUAL      reduce using rule 70 (T -> expr ACCESO LENGTH .)
    COMPIGUAL       reduce using rule 70 (T -> expr ACCESO LENGTH .)
    COMPDIFERENTE   reduce using rule 70 (T -> expr ACCESO LENGTH .)
    PLUS            reduce using rule 70 (T -> expr ACCESO LENGTH .)
    MINUS           reduce using rule 70 (T -> expr ACCESO LENGTH .)
    POR             reduce using rule 70 (T -> expr ACCESO LENGTH .)
    DIVIDE          reduce using rule 70 (T -> expr ACCESO LENGTH .)
    RETURN          reduce using rule 70 (T -> expr ACCESO LENGTH .)
    IF              reduce using rule 70 (T -> expr ACCESO LENGTH .)
    WHILE           reduce using rule 70 (T -> expr ACCESO LENGTH .)
    BREAK           reduce using rule 70 (T -> expr ACCESO LENGTH .)
    CONTINUE        reduce using rule 70 (T -> expr ACCESO LENGTH .)
    LLAVEIZQ        reduce using rule 70 (T -> expr ACCESO LENGTH .)
    ID              reduce using rule 70 (T -> expr ACCESO LENGTH .)
    THIS            reduce using rule 70 (T -> expr ACCESO LENGTH .)
    NEW             reduce using rule 70 (T -> expr ACCESO LENGTH .)
    PARENTIZQ       reduce using rule 70 (T -> expr ACCESO LENGTH .)
    NEGLOGICA       reduce using rule 70 (T -> expr ACCESO LENGTH .)
    NUMERO          reduce using rule 70 (T -> expr ACCESO LENGTH .)
    CADENA          reduce using rule 70 (T -> expr ACCESO LENGTH .)
    TRUE            reduce using rule 70 (T -> expr ACCESO LENGTH .)
    FALSE           reduce using rule 70 (T -> expr ACCESO LENGTH .)
    NULL            reduce using rule 70 (T -> expr ACCESO LENGTH .)
    LLAVEDER        reduce using rule 70 (T -> expr ACCESO LENGTH .)
    ELSE            reduce using rule 70 (T -> expr ACCESO LENGTH .)
    PARENTDER       reduce using rule 70 (T -> expr ACCESO LENGTH .)
    CORCHDER        reduce using rule 70 (T -> expr ACCESO LENGTH .)
    FINALIZADOR     reduce using rule 70 (T -> expr ACCESO LENGTH .)
    COMA            reduce using rule 70 (T -> expr ACCESO LENGTH .)


state 126

    (71) T -> expr binary expr .
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

  ! shift/reduce conflict for ACCESO resolved as shift
  ! shift/reduce conflict for CORCHIZQ resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for YAND resolved as shift
  ! shift/reduce conflict for OOR resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for MAYORIGUAL resolved as shift
  ! shift/reduce conflict for COMPIGUAL resolved as shift
  ! shift/reduce conflict for COMPDIFERENTE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    RETURN          reduce using rule 71 (T -> expr binary expr .)
    IF              reduce using rule 71 (T -> expr binary expr .)
    WHILE           reduce using rule 71 (T -> expr binary expr .)
    BREAK           reduce using rule 71 (T -> expr binary expr .)
    CONTINUE        reduce using rule 71 (T -> expr binary expr .)
    LLAVEIZQ        reduce using rule 71 (T -> expr binary expr .)
    ID              reduce using rule 71 (T -> expr binary expr .)
    THIS            reduce using rule 71 (T -> expr binary expr .)
    NEW             reduce using rule 71 (T -> expr binary expr .)
    PARENTIZQ       reduce using rule 71 (T -> expr binary expr .)
    NEGLOGICA       reduce using rule 71 (T -> expr binary expr .)
    NUMERO          reduce using rule 71 (T -> expr binary expr .)
    CADENA          reduce using rule 71 (T -> expr binary expr .)
    TRUE            reduce using rule 71 (T -> expr binary expr .)
    FALSE           reduce using rule 71 (T -> expr binary expr .)
    NULL            reduce using rule 71 (T -> expr binary expr .)
    LLAVEDER        reduce using rule 71 (T -> expr binary expr .)
    ELSE            reduce using rule 71 (T -> expr binary expr .)
    PARENTDER       reduce using rule 71 (T -> expr binary expr .)
    CORCHDER        reduce using rule 71 (T -> expr binary expr .)
    FINALIZADOR     reduce using rule 71 (T -> expr binary expr .)
    COMA            reduce using rule 71 (T -> expr binary expr .)
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

  ! CORCHIZQ        [ reduce using rule 71 (T -> expr binary expr .) ]
  ! ACCESO          [ reduce using rule 71 (T -> expr binary expr .) ]
  ! MODULO          [ reduce using rule 71 (T -> expr binary expr .) ]
  ! YAND            [ reduce using rule 71 (T -> expr binary expr .) ]
  ! OOR             [ reduce using rule 71 (T -> expr binary expr .) ]
  ! MENORQUE        [ reduce using rule 71 (T -> expr binary expr .) ]
  ! MENORIGUAL      [ reduce using rule 71 (T -> expr binary expr .) ]
  ! MAYORQUE        [ reduce using rule 71 (T -> expr binary expr .) ]
  ! MAYORIGUAL      [ reduce using rule 71 (T -> expr binary expr .) ]
  ! COMPIGUAL       [ reduce using rule 71 (T -> expr binary expr .) ]
  ! COMPDIFERENTE   [ reduce using rule 71 (T -> expr binary expr .) ]
  ! PLUS            [ reduce using rule 71 (T -> expr binary expr .) ]
  ! MINUS           [ reduce using rule 71 (T -> expr binary expr .) ]
  ! POR             [ reduce using rule 71 (T -> expr binary expr .) ]
  ! DIVIDE          [ reduce using rule 71 (T -> expr binary expr .) ]

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 127

    (43) M -> WHILE PARENTIZQ expr . PARENTDER stmt
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

    PARENTDER       shift and go to state 140
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 128

    (51) assign -> location ASIGNAR expr .
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

    FINALIZADOR     reduce using rule 51 (assign -> location ASIGNAR expr .)
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 129

    (58) call -> method PARENTIZQ Q . PARENTDER

    PARENTDER       shift and go to state 141


state 130

    (59) Q -> actuals .

    PARENTDER       reduce using rule 59 (Q -> actuals .)


state 131

    (61) actuals -> expr . S
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (62) S -> . expr S
    (63) S -> .
    (75) binary -> . U
    (64) expr -> . T
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    PARENTDER       reduce using rule 63 (S -> .)
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    expr                           shift and go to state 142
    S                              shift and go to state 143
    binary                         shift and go to state 94
    U                              shift and go to state 95
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 132

    (68) T -> NEW ID PARENTIZQ . PARENTDER

    PARENTDER       shift and go to state 144


state 133

    (69) T -> NEW TYPE CORCHIZQ . expr CORCHDER
    (26) G -> TYPE CORCHIZQ . CORCHDER
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    CORCHDER        shift and go to state 30
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    expr                           shift and go to state 145
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 134

    (32) vardecl -> TYPE ID J L . FINALIZADOR

    FINALIZADOR     shift and go to state 146


state 135

    (36) L -> K . L
    (36) L -> . K L
    (37) L -> .
    (35) K -> . COMA ID J

    FINALIZADOR     reduce using rule 37 (L -> .)
    COMA            shift and go to state 136

    K                              shift and go to state 135
    L                              shift and go to state 147

state 136

    (35) K -> COMA . ID J

    ID              shift and go to state 148


state 137

    (33) J -> ASIGNAR expr .
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

    COMA            reduce using rule 33 (J -> ASIGNAR expr .)
    FINALIZADOR     reduce using rule 33 (J -> ASIGNAR expr .)
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 138

    (42) M -> IF PARENTIZQ expr PARENTDER . stmt O
    (38) stmt -> . M
    (39) M -> . assign FINALIZADOR
    (40) M -> . call FINALIZADOR
    (41) M -> . RETURN N
    (42) M -> . IF PARENTIZQ expr PARENTDER stmt O
    (43) M -> . WHILE PARENTIZQ expr PARENTDER stmt
    (44) M -> . BREAK FINALIZADOR
    (45) M -> . CONTINUE FINALIZADOR
    (46) M -> . block
    (51) assign -> . location ASIGNAR expr
    (58) call -> . method PARENTIZQ Q PARENTDER
    (27) block -> . LLAVEIZQ H I LLAVEDER
    (52) location -> . method
    (53) location -> . Pprima
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (55) P -> . ID
    (56) P -> . expr ACCESO ID
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL

    RETURN          shift and go to state 53
    IF              shift and go to state 54
    WHILE           shift and go to state 57
    BREAK           shift and go to state 58
    CONTINUE        shift and go to state 59
    LLAVEIZQ        shift and go to state 41
    ID              shift and go to state 65
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77

    expr                           shift and go to state 56
    stmt                           shift and go to state 149
    M                              shift and go to state 50
    assign                         shift and go to state 51
    call                           shift and go to state 52
    block                          shift and go to state 60
    location                       shift and go to state 61
    method                         shift and go to state 62
    Pprima                         shift and go to state 63
    P                              shift and go to state 64
    T                              shift and go to state 66
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    V                              shift and go to state 72

state 139

    (57) Pprima -> expr CORCHIZQ expr CORCHDER .

    ASIGNAR         reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    CORCHIZQ        reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    ACCESO          reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    MODULO          reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    YAND            reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    OOR             reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    MENORQUE        reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    MENORIGUAL      reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    MAYORQUE        reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    MAYORIGUAL      reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    COMPIGUAL       reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    COMPDIFERENTE   reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    PLUS            reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    MINUS           reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    POR             reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    DIVIDE          reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    RETURN          reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    IF              reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    WHILE           reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    BREAK           reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    CONTINUE        reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    LLAVEIZQ        reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    ID              reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    THIS            reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    NEW             reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    PARENTIZQ       reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    NEGLOGICA       reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    NUMERO          reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    CADENA          reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    TRUE            reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    FALSE           reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    NULL            reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    LLAVEDER        reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    ELSE            reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    PARENTDER       reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    CORCHDER        reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    FINALIZADOR     reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)
    COMA            reduce using rule 57 (Pprima -> expr CORCHIZQ expr CORCHDER .)


state 140

    (43) M -> WHILE PARENTIZQ expr PARENTDER . stmt
    (38) stmt -> . M
    (39) M -> . assign FINALIZADOR
    (40) M -> . call FINALIZADOR
    (41) M -> . RETURN N
    (42) M -> . IF PARENTIZQ expr PARENTDER stmt O
    (43) M -> . WHILE PARENTIZQ expr PARENTDER stmt
    (44) M -> . BREAK FINALIZADOR
    (45) M -> . CONTINUE FINALIZADOR
    (46) M -> . block
    (51) assign -> . location ASIGNAR expr
    (58) call -> . method PARENTIZQ Q PARENTDER
    (27) block -> . LLAVEIZQ H I LLAVEDER
    (52) location -> . method
    (53) location -> . Pprima
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (55) P -> . ID
    (56) P -> . expr ACCESO ID
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL

    RETURN          shift and go to state 53
    IF              shift and go to state 54
    WHILE           shift and go to state 57
    BREAK           shift and go to state 58
    CONTINUE        shift and go to state 59
    LLAVEIZQ        shift and go to state 41
    ID              shift and go to state 65
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77

    expr                           shift and go to state 56
    stmt                           shift and go to state 150
    M                              shift and go to state 50
    assign                         shift and go to state 51
    call                           shift and go to state 52
    block                          shift and go to state 60
    location                       shift and go to state 61
    method                         shift and go to state 62
    Pprima                         shift and go to state 63
    P                              shift and go to state 64
    T                              shift and go to state 66
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    V                              shift and go to state 72

state 141

    (58) call -> method PARENTIZQ Q PARENTDER .

    FINALIZADOR     reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    CORCHIZQ        reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    ACCESO          reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    MODULO          reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    YAND            reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    OOR             reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    MENORQUE        reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    MENORIGUAL      reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    MAYORQUE        reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    MAYORIGUAL      reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    COMPIGUAL       reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    COMPDIFERENTE   reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    PLUS            reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    MINUS           reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    POR             reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    DIVIDE          reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    RETURN          reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    IF              reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    WHILE           reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    BREAK           reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    CONTINUE        reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    LLAVEIZQ        reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    ID              reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    THIS            reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    NEW             reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    PARENTIZQ       reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    NEGLOGICA       reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    NUMERO          reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    CADENA          reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    TRUE            reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    FALSE           reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    NULL            reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    LLAVEDER        reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    ELSE            reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    PARENTDER       reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    CORCHDER        reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)
    COMA            reduce using rule 58 (call -> method PARENTIZQ Q PARENTDER .)


state 142

    (62) S -> expr . S
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (62) S -> . expr S
    (63) S -> .
    (75) binary -> . U
    (64) expr -> . T
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (52) location -> . method
    (53) location -> . Pprima
    (58) call -> . method PARENTIZQ Q PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL
    (55) P -> . ID
    (56) P -> . expr ACCESO ID

    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    PARENTDER       reduce using rule 63 (S -> .)
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77
    ID              shift and go to state 65

    expr                           shift and go to state 142
    S                              shift and go to state 151
    binary                         shift and go to state 94
    U                              shift and go to state 95
    T                              shift and go to state 66
    location                       shift and go to state 87
    call                           shift and go to state 88
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    method                         shift and go to state 89
    Pprima                         shift and go to state 63
    V                              shift and go to state 72
    P                              shift and go to state 64

state 143

    (61) actuals -> expr S .

    PARENTDER       reduce using rule 61 (actuals -> expr S .)


state 144

    (68) T -> NEW ID PARENTIZQ PARENTDER .

    CORCHIZQ        reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    ACCESO          reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    MODULO          reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    YAND            reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    OOR             reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    MENORQUE        reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    MENORIGUAL      reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    MAYORQUE        reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    MAYORIGUAL      reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    COMPIGUAL       reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    COMPDIFERENTE   reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    PLUS            reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    MINUS           reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    POR             reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    DIVIDE          reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    RETURN          reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    IF              reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    WHILE           reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    BREAK           reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    CONTINUE        reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    LLAVEIZQ        reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    ID              reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    THIS            reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    NEW             reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    PARENTIZQ       reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    NEGLOGICA       reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    NUMERO          reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    CADENA          reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    TRUE            reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    FALSE           reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    NULL            reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    LLAVEDER        reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    ELSE            reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    PARENTDER       reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    CORCHDER        reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    FINALIZADOR     reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)
    COMA            reduce using rule 68 (T -> NEW ID PARENTIZQ PARENTDER .)


state 145

    (69) T -> NEW TYPE CORCHIZQ expr . CORCHDER
    (70) T -> expr . ACCESO LENGTH
    (71) T -> expr . binary expr
    (57) Pprima -> expr . CORCHIZQ expr CORCHDER
    (56) P -> expr . ACCESO ID
    (75) binary -> . U
    (76) U -> . MODULO
    (77) U -> . YAND
    (78) U -> . OOR
    (79) U -> . MENORQUE
    (80) U -> . MENORIGUAL
    (81) U -> . MAYORQUE
    (82) U -> . MAYORIGUAL
    (83) U -> . COMPIGUAL
    (84) U -> . COMPDIFERENTE
    (85) U -> . PLUS
    (86) U -> . MINUS
    (87) U -> . POR
    (88) U -> . DIVIDE

    CORCHDER        shift and go to state 152
    ACCESO          shift and go to state 120
    CORCHIZQ        shift and go to state 92
    MODULO          shift and go to state 96
    YAND            shift and go to state 97
    OOR             shift and go to state 98
    MENORQUE        shift and go to state 99
    MENORIGUAL      shift and go to state 100
    MAYORQUE        shift and go to state 101
    MAYORIGUAL      shift and go to state 102
    COMPIGUAL       shift and go to state 103
    COMPDIFERENTE   shift and go to state 104
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    POR             shift and go to state 107
    DIVIDE          shift and go to state 108

    binary                         shift and go to state 94
    U                              shift and go to state 95

state 146

    (32) vardecl -> TYPE ID J L FINALIZADOR .

    INT             reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    BOOLEAN         reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    STRING          reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    ID              reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    RETURN          reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    IF              reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    WHILE           reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    BREAK           reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    CONTINUE        reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    LLAVEIZQ        reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    THIS            reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    NEW             reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    PARENTIZQ       reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    NEGLOGICA       reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    NUMERO          reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    CADENA          reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    TRUE            reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    FALSE           reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    NULL            reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)
    LLAVEDER        reduce using rule 32 (vardecl -> TYPE ID J L FINALIZADOR .)


state 147

    (36) L -> K L .

    FINALIZADOR     reduce using rule 36 (L -> K L .)


state 148

    (35) K -> COMA ID . J
    (33) J -> . ASIGNAR expr
    (34) J -> .

    ASIGNAR         shift and go to state 118
    COMA            reduce using rule 34 (J -> .)
    FINALIZADOR     reduce using rule 34 (J -> .)

    J                              shift and go to state 153

state 149

    (42) M -> IF PARENTIZQ expr PARENTDER stmt . O
    (49) O -> . ELSE stmt
    (50) O -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 155
    RETURN          reduce using rule 50 (O -> .)
    IF              reduce using rule 50 (O -> .)
    WHILE           reduce using rule 50 (O -> .)
    BREAK           reduce using rule 50 (O -> .)
    CONTINUE        reduce using rule 50 (O -> .)
    LLAVEIZQ        reduce using rule 50 (O -> .)
    ID              reduce using rule 50 (O -> .)
    THIS            reduce using rule 50 (O -> .)
    NEW             reduce using rule 50 (O -> .)
    PARENTIZQ       reduce using rule 50 (O -> .)
    NEGLOGICA       reduce using rule 50 (O -> .)
    NUMERO          reduce using rule 50 (O -> .)
    CADENA          reduce using rule 50 (O -> .)
    TRUE            reduce using rule 50 (O -> .)
    FALSE           reduce using rule 50 (O -> .)
    NULL            reduce using rule 50 (O -> .)
    LLAVEDER        reduce using rule 50 (O -> .)

  ! ELSE            [ reduce using rule 50 (O -> .) ]

    O                              shift and go to state 154

state 150

    (43) M -> WHILE PARENTIZQ expr PARENTDER stmt .

    RETURN          reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    IF              reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    WHILE           reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    BREAK           reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    CONTINUE        reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    LLAVEIZQ        reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    ID              reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    THIS            reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    NEW             reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    PARENTIZQ       reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    NEGLOGICA       reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    NUMERO          reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    CADENA          reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    TRUE            reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    FALSE           reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    NULL            reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    LLAVEDER        reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)
    ELSE            reduce using rule 43 (M -> WHILE PARENTIZQ expr PARENTDER stmt .)


state 151

    (62) S -> expr S .

    PARENTDER       reduce using rule 62 (S -> expr S .)


state 152

    (69) T -> NEW TYPE CORCHIZQ expr CORCHDER .

    CORCHIZQ        reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    ACCESO          reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    MODULO          reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    YAND            reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    OOR             reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    MENORQUE        reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    MENORIGUAL      reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    MAYORQUE        reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    MAYORIGUAL      reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    COMPIGUAL       reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    COMPDIFERENTE   reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    PLUS            reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    MINUS           reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    POR             reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    DIVIDE          reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    RETURN          reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    IF              reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    WHILE           reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    BREAK           reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    CONTINUE        reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    LLAVEIZQ        reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    ID              reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    THIS            reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    NEW             reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    PARENTIZQ       reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    NEGLOGICA       reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    NUMERO          reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    CADENA          reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    TRUE            reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    FALSE           reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    NULL            reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    LLAVEDER        reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    ELSE            reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    PARENTDER       reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    CORCHDER        reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    FINALIZADOR     reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)
    COMA            reduce using rule 69 (T -> NEW TYPE CORCHIZQ expr CORCHDER .)


state 153

    (35) K -> COMA ID J .

    COMA            reduce using rule 35 (K -> COMA ID J .)
    FINALIZADOR     reduce using rule 35 (K -> COMA ID J .)


state 154

    (42) M -> IF PARENTIZQ expr PARENTDER stmt O .

    RETURN          reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    IF              reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    WHILE           reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    BREAK           reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    CONTINUE        reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    LLAVEIZQ        reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    ID              reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    THIS            reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    NEW             reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    PARENTIZQ       reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    NEGLOGICA       reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    NUMERO          reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    CADENA          reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    TRUE            reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    FALSE           reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    NULL            reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    LLAVEDER        reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)
    ELSE            reduce using rule 42 (M -> IF PARENTIZQ expr PARENTDER stmt O .)


state 155

    (49) O -> ELSE . stmt
    (38) stmt -> . M
    (39) M -> . assign FINALIZADOR
    (40) M -> . call FINALIZADOR
    (41) M -> . RETURN N
    (42) M -> . IF PARENTIZQ expr PARENTDER stmt O
    (43) M -> . WHILE PARENTIZQ expr PARENTDER stmt
    (44) M -> . BREAK FINALIZADOR
    (45) M -> . CONTINUE FINALIZADOR
    (46) M -> . block
    (51) assign -> . location ASIGNAR expr
    (58) call -> . method PARENTIZQ Q PARENTDER
    (27) block -> . LLAVEIZQ H I LLAVEDER
    (52) location -> . method
    (53) location -> . Pprima
    (54) method -> . P
    (57) Pprima -> . expr CORCHIZQ expr CORCHDER
    (55) P -> . ID
    (56) P -> . expr ACCESO ID
    (64) expr -> . T
    (65) T -> . location
    (66) T -> . call
    (67) T -> . THIS
    (68) T -> . NEW ID PARENTIZQ PARENTDER
    (69) T -> . NEW TYPE CORCHIZQ expr CORCHDER
    (70) T -> . expr ACCESO LENGTH
    (71) T -> . expr binary expr
    (72) T -> . unary expr
    (73) T -> . literal
    (74) T -> . PARENTIZQ expr PARENTDER
    (89) unary -> . NEGLOGICA
    (90) literal -> . V
    (91) V -> . NUMERO
    (92) V -> . CADENA
    (93) V -> . TRUE
    (94) V -> . FALSE
    (95) V -> . NULL

    RETURN          shift and go to state 53
    IF              shift and go to state 54
    WHILE           shift and go to state 57
    BREAK           shift and go to state 58
    CONTINUE        shift and go to state 59
    LLAVEIZQ        shift and go to state 41
    ID              shift and go to state 65
    THIS            shift and go to state 67
    NEW             shift and go to state 68
    PARENTIZQ       shift and go to state 55
    NEGLOGICA       shift and go to state 71
    NUMERO          shift and go to state 73
    CADENA          shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NULL            shift and go to state 77

    stmt                           shift and go to state 156
    M                              shift and go to state 50
    assign                         shift and go to state 51
    call                           shift and go to state 52
    expr                           shift and go to state 56
    block                          shift and go to state 60
    location                       shift and go to state 61
    method                         shift and go to state 62
    Pprima                         shift and go to state 63
    P                              shift and go to state 64
    T                              shift and go to state 66
    unary                          shift and go to state 69
    literal                        shift and go to state 70
    V                              shift and go to state 72

state 156

    (49) O -> ELSE stmt .

    ELSE            reduce using rule 49 (O -> ELSE stmt .)
    RETURN          reduce using rule 49 (O -> ELSE stmt .)
    IF              reduce using rule 49 (O -> ELSE stmt .)
    WHILE           reduce using rule 49 (O -> ELSE stmt .)
    BREAK           reduce using rule 49 (O -> ELSE stmt .)
    CONTINUE        reduce using rule 49 (O -> ELSE stmt .)
    LLAVEIZQ        reduce using rule 49 (O -> ELSE stmt .)
    ID              reduce using rule 49 (O -> ELSE stmt .)
    THIS            reduce using rule 49 (O -> ELSE stmt .)
    NEW             reduce using rule 49 (O -> ELSE stmt .)
    PARENTIZQ       reduce using rule 49 (O -> ELSE stmt .)
    NEGLOGICA       reduce using rule 49 (O -> ELSE stmt .)
    NUMERO          reduce using rule 49 (O -> ELSE stmt .)
    CADENA          reduce using rule 49 (O -> ELSE stmt .)
    TRUE            reduce using rule 49 (O -> ELSE stmt .)
    FALSE           reduce using rule 49 (O -> ELSE stmt .)
    NULL            reduce using rule 49 (O -> ELSE stmt .)
    LLAVEDER        reduce using rule 49 (O -> ELSE stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 15 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for THIS in state 53 resolved as shift
WARNING: shift/reduce conflict for NEW in state 53 resolved as shift
WARNING: shift/reduce conflict for PARENTIZQ in state 53 resolved as shift
WARNING: shift/reduce conflict for NEGLOGICA in state 53 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 53 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 53 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 53 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 53 resolved as shift
WARNING: shift/reduce conflict for NULL in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for PARENTIZQ in state 89 resolved as shift
WARNING: shift/reduce conflict for ACCESO in state 116 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 116 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 116 resolved as shift
WARNING: shift/reduce conflict for YAND in state 116 resolved as shift
WARNING: shift/reduce conflict for OOR in state 116 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 116 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 116 resolved as shift
WARNING: shift/reduce conflict for MAYORIGUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for COMPIGUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for COMPDIFERENTE in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for POR in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for ACCESO in state 126 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 126 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 126 resolved as shift
WARNING: shift/reduce conflict for YAND in state 126 resolved as shift
WARNING: shift/reduce conflict for OOR in state 126 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 126 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 126 resolved as shift
WARNING: shift/reduce conflict for MAYORIGUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for COMPIGUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for COMPDIFERENTE in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for POR in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 149 resolved as shift
